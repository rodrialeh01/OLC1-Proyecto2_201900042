/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var AST = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[1,16],$V3=[1,17],$V4=[1,29],$V5=[1,23],$V6=[1,25],$V7=[1,26],$V8=[1,24],$V9=[1,27],$Va=[1,21],$Vb=[1,22],$Vc=[1,30],$Vd=[1,35],$Ve=[1,32],$Vf=[1,31],$Vg=[1,33],$Vh=[1,34],$Vi=[5,19,20,24,35,36,37,38,39,40,41,49,50,54,55,57,58,59,60,63],$Vj=[1,44],$Vk=[1,50],$Vl=[28,43],$Vm=[2,56],$Vn=[1,60],$Vo=[1,67],$Vp=[1,71],$Vq=[1,63],$Vr=[1,64],$Vs=[1,65],$Vt=[1,66],$Vu=[1,68],$Vv=[1,69],$Vw=[1,70],$Vx=[1,72],$Vy=[1,76],$Vz=[1,77],$VA=[8,28,43],$VB=[1,100],$VC=[1,101],$VD=[1,102],$VE=[1,103],$VF=[1,104],$VG=[1,116],$VH=[1,117],$VI=[1,118],$VJ=[1,119],$VK=[1,120],$VL=[1,121],$VM=[1,122],$VN=[1,123],$VO=[1,124],$VP=[1,125],$VQ=[1,126],$VR=[1,127],$VS=[1,128],$VT=[1,129],$VU=[1,130],$VV=[8,26,28,31,45,71,72,73,74,75,76,77,78,80,81,82,83,84,85,90],$VW=[1,151],$VX=[26,28],$VY=[5,19,20,24,35,36,37,38,39,40,41,49,50,51,53,54,55,57,58,59,60,63,64],$VZ=[8,26,28,31,45,77,78,90],$V_=[5,8,19,20,24,26,28,31,35,36,37,38,39,40,41,45,49,50,54,55,57,58,59,60,63,71,72,73,74,75,76,77,78,80,81,82,83,84,85,90],$V$=[8,26,28,31,45,71,72,77,78,80,81,82,83,84,85,90],$V01=[8,26,28,31,45,71,72,73,74,75,77,78,80,81,82,83,84,85,90],$V11=[8,26,28,31,45,77,78,80,81,82,83,84,85,90],$V21=[49,57,58],$V31=[5,19,20,24,35,36,37,38,39,40,41,49,50,51,53,54,55,57,58,59,60,63];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"AMBITO_GLOBAL":6,"INVALID":7,"PTCOMA":8,"IMPRIMIR":9,"DECLARACION_ASIGNACION":10,"DECLARACION":11,"ASIGNACION":12,"SENTENCIA_IF":13,"CICLO_WHILE":14,"SENTENCIA_SWITCH":15,"CICLO_FOR":16,"CICLO_DO_WHILE":17,"CICLO_DO_UNTIL":18,"RBREAK":19,"RCONTINUE":20,"INS_RETURN":21,"LLAMADA":22,"METODO":23,"IDENTIFICADOR":24,"PARABRE":25,"PARCIERRA":26,"LISTA_EXPRESIONES":27,"COMA":28,"EXPRESION":29,"LISTA_PARAMETROS":30,"DOSPUNTOS":31,"RVOID":32,"ENCAPSULAMIENTO":33,"TIPO_DATO":34,"RINT":35,"RSTRING":36,"RCHAR":37,"RDOUBLE":38,"RBOOLEAN":39,"RPRINT":40,"RPRINTLN":41,"LISTA_IDENTIFICADORES":42,"IGUAL":43,"CORABRE":44,"CORCIERRA":45,"INCREMENTO":46,"DECREMENTO":47,"LLAVEA":48,"LLAVEC":49,"RIF":50,"RELSE":51,"LISTA_ELIF":52,"RELIF":53,"RRETURN":54,"RSWITCH":55,"LISTA_CASES":56,"RDEFAULT":57,"RCASE":58,"RWHILE":59,"RFOR":60,"DECLARACION_ASIG_FOR":61,"ACTUALIZACION_FOR":62,"RDO":63,"RUNTIL":64,"ENTERO":65,"CADENA":66,"CARACTER":67,"DECIMAL":68,"RTRUE":69,"RFALSE":70,"MAS":71,"MENOS":72,"MULTIPLICACION":73,"DIVISION":74,"MODULO":75,"POTENCIA":76,"OR":77,"AND":78,"NOT":79,"IGUALIGUAL":80,"DIFERENTE":81,"MENOR":82,"MAYOR":83,"MENOROIGUAL":84,"MAYOROIGUAL":85,"OPERADOR_TERNARIO":86,"CASTEOS":87,"ACCESO_VECTORES":88,"FUNCIONES_NATIVAS":89,"INTERROGACION":90,"RFLOAT":91,"RBOOL":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"INVALID",8:"PTCOMA",19:"RBREAK",20:"RCONTINUE",24:"IDENTIFICADOR",25:"PARABRE",26:"PARCIERRA",28:"COMA",31:"DOSPUNTOS",32:"RVOID",35:"RINT",36:"RSTRING",37:"RCHAR",38:"RDOUBLE",39:"RBOOLEAN",40:"RPRINT",41:"RPRINTLN",43:"IGUAL",44:"CORABRE",45:"CORCIERRA",46:"INCREMENTO",47:"DECREMENTO",48:"LLAVEA",49:"LLAVEC",50:"RIF",51:"RELSE",53:"RELIF",54:"RRETURN",55:"RSWITCH",57:"RDEFAULT",58:"RCASE",59:"RWHILE",60:"RFOR",63:"RDO",64:"RUNTIL",65:"ENTERO",66:"CADENA",67:"CARACTER",68:"DECIMAL",69:"RTRUE",70:"RFALSE",71:"MAS",72:"MENOS",73:"MULTIPLICACION",74:"DIVISION",75:"MODULO",76:"POTENCIA",77:"OR",78:"AND",79:"NOT",80:"IGUALIGUAL",81:"DIFERENTE",82:"MENOR",83:"MAYOR",84:"MENOROIGUAL",85:"MAYOROIGUAL",88:"ACCESO_VECTORES",89:"FUNCIONES_NATIVAS",90:"INTERROGACION",91:"RFLOAT",92:"RBOOL"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,1],[22,4],[22,5],[27,3],[27,1],[23,7],[23,5],[23,6],[23,4],[30,4],[30,2],[34,1],[34,1],[34,1],[34,1],[34,1],[9,5],[9,5],[11,3],[11,3],[11,3],[11,3],[11,3],[12,4],[12,7],[12,10],[12,3],[12,3],[10,5],[10,5],[10,5],[10,5],[10,5],[33,3],[33,2],[42,3],[42,1],[13,5],[13,7],[13,6],[13,8],[52,6],[52,5],[21,2],[21,3],[15,7],[15,10],[15,9],[56,5],[56,4],[14,5],[16,9],[17,7],[18,7],[61,4],[61,3],[62,3],[62,2],[62,2],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,1],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,3],[29,3],[29,3],[29,2],[29,3],[29,3],[29,3],[29,3],[29,3],[29,3],[29,2],[29,2],[29,1],[29,1],[29,1],[29,1],[29,1],[86,5],[87,4],[87,4],[87,4],[87,4],[87,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=new Nodo.default("INICIO","");
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            return this.$;
                                                                            
break;
case 2:
this.$=new Nodo.default("INSTRUCCIONES","");
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 3:
this.$=new Nodo.default("INSTRUCCIONES","");
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 4:
this.$=new Nodo.default("INSTRUCCIONES","");
                                                                            this.$.agregarHijo(new Nodo.default("ERROR LEXICO",""));
                                                                            
break;
case 5:
this.$=new Nodo.default("INSTRUCCIONES","");
                                                                            this.$.agregarHijo(new Nodo.default("ERROR SEMANTICO",""));
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 18: case 19: case 20:
this.$=new Nodo.default("AMBITO LOCAL","");
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 16:
this.$=new Nodo.default("AMBITO LOCAL","");
                                                                            this.$.agregarHijo(new Nodo.default("break","BREAK"));
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 17:
this.$=new Nodo.default("AMBITO LOCAL","");
                                                                            this.$.agregarHijo(new Nodo.default("continue","CONTINUE"));
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 21:
this.$= new Nodo.default("LLAMADA","");
                                                                            this.$.agregarHijo(new Nodo.default("IDENTIFICADOR", $$[$0-3]));
                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 22:
this.$= new Nodo.default("LLAMADA","");
                                                                            this.$.agregarHijo(new Nodo.default("IDENTIFICADOR", $$[$0-4]));
                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 23:
this.$ = new Nodo.default("LISTA_EXPRESIONES", "");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(",","COMA"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 24:
this.$ = new Nodo.default("LISTA_EXPRESIONES", "");
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 25:
this.$ = new Nodo.default("METODO","");
                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-6],"IDENTIFICADOR"));
                                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                            this.$.agregarHijo($$[$0-4]);
                                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                            this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                                            this.$.agregarHijo(new Nodo.default("void","RVOID"));
                                                                                            this.$.agregarHijo($$[$0-1]);
                                                                                            
break;
case 26:
this.$ = new Nodo.default("METODO","");
                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-4],"IDENTIFICADOR"));
                                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                            this.$.agregarHijo($$[$0-2]);
                                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                            this.$.agregarHijo($$[$0]);
                                                                                            
break;
case 27:
this.$ = new Nodo.default("METODO","");
                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-5],"IDENTIFICADOR"));
                                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                            this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                                            this.$.agregarHijo(new Nodo.default("void","RVOID"));
                                                                                            this.$.agregarHijo($$[$0]);
                                                                                            
break;
case 28:
this.$ = new Nodo.default("METODO","");
                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-3],"IDENTIFICADOR"));
                                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                            this.$.agregarHijo($$[$0]);
                                                                                            
break;
case 29:
this.$=new Nodo.default("LISTA_PARAMETROS","");
                                                                            this.$.agregarHijo($$[$0-3]);
                                                                            this.$.agregarHijo(new Nodo.default(",","COMA"));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"IDENTIFICADOR"));
                                                                            
break;
case 30:
this.$=new Nodo.default("LISTA_PARAMETROS","");
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"IDENTIFICADOR"));
                                                                            
break;
case 31:
this.$=new Nodo.default("TIPO_DATO","");
                                                                            this.$.agregarHijo(new Nodo.default("int","RINT"));
                                                                            
break;
case 32:
this.$=new Nodo.default("TIPO_DATO","");
                                                                            this.$.agregarHijo(new Nodo.default("string","RSTRING"));
                                                                            
break;
case 33:
this.$=new Nodo.default("TIPO_DATO","");
                                                                            this.$.agregarHijo(new Nodo.default("char","RCHAR"));
                                                                            
break;
case 34:
this.$=new Nodo.default("TIPO_DATO","");
                                                                            this.$.agregarHijo(new Nodo.default("double","RDOUBLE"));
                                                                            
break;
case 35:
this.$=new Nodo.default("TIPO_DATO","");
                                                                            this.$.agregarHijo(new Nodo.default("boolean","RBOOLEAN"));
                                                                            
break;
case 36:
this.$=new Nodo.default("IMPRIMIR","");
                                                                            this.$.agregarHijo(new Nodo.default("print","RPRINT"));
                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 37:
this.$=new Nodo.default("IMPRIMIR","");
                                                                            this.$.agregarHijo(new Nodo.default("println","RPRINT"));
                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 38:
this.$=new Nodo.default("DECLARACION","");
                                                                            this.$.agregarHijo(new Nodo.default("int",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 39:
this.$=new Nodo.default("DECLARACION","");
                                                                            this.$.agregarHijo(new Nodo.default("double",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 40:
this.$=new Nodo.default("DECLARACION","");
                                                                            this.$.agregarHijo(new Nodo.default("char",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 41:
this.$=new Nodo.default("DECLARACION","");
                                                                            this.$.agregarHijo(new Nodo.default("string",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 42:
this.$=new Nodo.default("DECLARACION","");
                                                                            this.$.agregarHijo(new Nodo.default("boolean",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 43:
this.$=new Nodo.default("ASIGNACION","");
                                                                                                            this.$.agregarHijo($$[$0-3]);
                                                                                                            this.$.agregarHijo(new Nodo.default("IGUAL","="));
                                                                                                            this.$.agregarHijo($$[$0-1]);
                                                                                                            this.$.agregarHijo(new Nodo.default("PTCOMA",";"));
                                                                                                            
break;
case 44:
this.$=new Nodo.default("ASIGNACION","");
                                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-6],"IDENTIFICADOR"));
                                                                                                            this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                            this.$.agregarHijo($$[$0-4]);
                                                                                                            this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                            this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                                            this.$.agregarHijo($$[$0-1]);
                                                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                            
break;
case 45:
this.$=new Nodo.default("ASIGNACION","");
                                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-9],"IDENTIFICADOR"));
                                                                                                            this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                            this.$.agregarHijo($$[$0-7]);
                                                                                                            this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                            this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                            this.$.agregarHijo($$[$0-4]);
                                                                                                            this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                            this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                                            this.$.agregarHijo($$[$0-1]);
                                                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                            
break;
case 46:
this.$=new Nodo.default("ASIGNACION","");
                                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-2],"IDENTIFICADOR"));
                                                                                                            this.$.agregarHijo(new Nodo.default("++","INCREMENTO"));
                                                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                            
break;
case 47:
this.$=new Nodo.default("ASIGNACION","");
                                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-2],"IDENTIFICADOR"));
                                                                                                            this.$.agregarHijo(new Nodo.default("--","DECREMENTO"));
                                                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                            
break;
case 48:
this.$=new Nodo.default("DECLARACION_ASIGNACION","");
                                                                                this.$.agregarHijo(new Nodo.default("int","RINT"));
                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                
break;
case 49:
this.$=new Nodo.default("DECLARACION_ASIGNACION","");
                                                                                this.$.agregarHijo(new Nodo.default("double","RDOUBLE"));
                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                
break;
case 50:
this.$=new Nodo.default("DECLARACION_ASIGNACION","");
                                                                                this.$.agregarHijo(new Nodo.default("string","RSTRING"));
                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                
break;
case 51:
this.$=new Nodo.default("DECLARACION_ASIGNACION","");
                                                                                this.$.agregarHijo(new Nodo.default("char","RCHAR"));
                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                
break;
case 52:
this.$=new Nodo.default("DECLARACION_ASIGNACION","");
                                                                                this.$.agregarHijo(new Nodo.default("int","RBOOLEAN"));
                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                
break;
case 53:
this.$=new Nodo.default("ENCAPSULAMIENTO", "");
                                                                            this.$.agregarHijo(new Nodo.default("{", "LLAVEA"));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default("}", "LLAVEC"));
                                                                            
break;
case 54:
this.$=new Nodo.default("ENCAPSULAMIENTO", "");
                                                                            this.$.agregarHijo(new Nodo.default("{", "LLAVEA"));
                                                                            this.$.agregarHijo(new Nodo.default("}", "LLAVEC"));
                                                                            
break;
case 55:
this.$=new Nodo.default("LISTA_IDENTIFICADORES", "");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(",", "COMA"));
                                                                            this.$.agregarHijo(new Nodo.default($$[$0], "IDENTIFICADOR"));
                                                                            
break;
case 56:
this.$=new Nodo.default("LISTA_IDENTIFICADORES", "");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0], "IDENTIFICADOR"));
                                                                            
break;
case 57:
this.$ = new Nodo.default("SENTENCIA IF","");
                                                                                                this.$.agregarHijo(new Nodo.default("if","IF"));
                                                                                                this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                this.$.agregarHijo($$[$0-2]);
                                                                                                this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                this.$.agregarHijo($$[$0]);
                                                                                                
break;
case 58:
this.$ = new Nodo.default("SENTENCIA IF","");
                                                                                                this.$.agregarHijo(new Nodo.default("if","IF"));
                                                                                                this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                this.$.agregarHijo($$[$0-4]);
                                                                                                this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                this.$.agregarHijo($$[$0-2]);
                                                                                                this.$.agregarHijo(new Nodo.default("else","RELSE"));
                                                                                                this.$.agregarHijo($$[$0]);
                                                                                                
break;
case 59:
this.$ = new Nodo.default("SENTENCIA IF","");
                                                                                                this.$.agregarHijo(new Nodo.default("if","IF"));
                                                                                                this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                                this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                                this.$.agregarHijo($$[$0]);
                                                                                                
break;
case 60:
this.$ = new Nodo.default("SENTENCIA IF","");
                                                                                                this.$.agregarHijo(new Nodo.default("if","IF"));
                                                                                                this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                this.$.agregarHijo($$[$0-5]);
                                                                                                this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                                this.$.agregarHijo($$[$0-2]);
                                                                                                this.$.agregarHijo(new Nodo.default("else","RELSE"));
                                                                                                this.$.agregarHijo($$[$0]);
                                                                                                
break;
case 61:
this.$ = new Nodo.default("LISTA ELIF","");
                                                                            this.$.agregarHijo($$[$0-5]);
                                                                            this.$.agregarHijo(new Nodo.default("elif","ELIF"));
                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 62:
this.$ = new Nodo.default("LISTA ELIF","");
                                                                            this.$.agregarHijo(new Nodo.default("elif","ELIF"));
                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 63:
this.$=new Nodo.default("INS RETURN","");
                                                                            this.$.agregarHijo(new Nodo.default("return","RETURN"));
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 64:
this.$=new Nodo.default("INS RETURN","");
                                                                            this.$.agregarHijo(new Nodo.default("return","RETURN"));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 65:
this.$=new Nodo.default("SENTENCIA SWITCH","");
                                                                                                                    this.$.agregarHijo(new Nodo.default("switch","SWITCH"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                                    this.$.agregarHijo($$[$0-4]);
                                                                                                                    this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("{","LLAVEA"));
                                                                                                                    this.$.agregarHijo($$[$0-1]);
                                                                                                                    this.$.agregarHijo(new Nodo.default("}","LLAVEC"));
                                                                                                                    
break;
case 66:
this.$=new Nodo.default("SENTENCIA SWITCH","");
                                                                                                                    this.$.agregarHijo(new Nodo.default("switch","SWITCH"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                                    this.$.agregarHijo($$[$0-7]);
                                                                                                                    this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("{","LLAVEA"));
                                                                                                                    this.$.agregarHijo($$[$0-4]);
                                                                                                                    this.$.agregarHijo(new Nodo.default("default","RDEFAULT"));
                                                                                                                    this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                                                                    this.$.agregarHijo($$[$0-1]);
                                                                                                                    this.$.agregarHijo(new Nodo.default("}","LLAVEC"));
                                                                                                                    
break;
case 67:
this.$=new Nodo.default("SENTENCIA SWITCH","");
                                                                                                                    this.$.agregarHijo(new Nodo.default("switch","SWITCH"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                                    this.$.agregarHijo($$[$0-6]);
                                                                                                                    this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("{","LLAVEA"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("default","RDEFAULT"));
                                                                                                                    this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                                                                    this.$.agregarHijo($$[$0-1]);
                                                                                                                    this.$.agregarHijo(new Nodo.default("}","LLAVEC"));
                                                                                                                    
break;
case 68:
this.$= new Nodo.default("LISTA_CASES","");
                                                                            this.$.agregarHijo($$[$0-4]);
                                                                            this.$.agregarHijo(new Nodo.default("case","RCASE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 69:
this.$= new Nodo.default("LISTA_CASES","");
                                                                            this.$.agregarHijo(new Nodo.default("case","RCASE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 70:
this.$ = new Nodo.default("CICLO WHILE","");
                                                                            this.$.agregarHijo(new Nodo.default("while","WHILE"));
                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 71:
this.$= new Nodo.default("CICLO FOR","");
                                                                                                                    this.$.agregarHijo(new Nodo.default("for","FOR"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("(","("));
                                                                                                                    this.$.agregarHijo($$[$0-6]);
                                                                                                                    this.$.agregarHijo(new Nodo.default(";",";"));
                                                                                                                    this.$.agregarHijo($$[$0-4]);
                                                                                                                    this.$.agregarHijo(new Nodo.default(";",";"));
                                                                                                                    this.$.agregarHijo($$[$0-2]);
                                                                                                                    this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                                    this.$.agregarHijo($$[$0]);
                                                                                                                    
break;
case 72:
this.$= new Nodo.default("CICLO DO_WHILE", "");
                                                                                this.$.agregarHijo(new Nodo.default("do", "DO"));
                                                                                this.$.agregarHijo($$[$0-5]);
                                                                                this.$.agregarHijo(new Nodo.default("while", "WHILE"));
                                                                                this.$.agregarHijo(new Nodo.default("(", "("));
                                                                                this.$.agregarHijo($$[$0-2]);
                                                                                this.$.agregarHijo(new Nodo.default(")", ")"));
                                                                                this.$.agregarHijo(new Nodo.default(";", ";"));
                                                                                
break;
case 73:
this.$= new Nodo.default("CICLO DO_UNTIL","");
                                                                                this.$.agregarHijo(new Nodo.default("do","DO"));
                                                                                this.$.agregarHijo($$[$0-5]);
                                                                                this.$.agregarHijo(new Nodo.default("until","UNTIL"));
                                                                                this.$.agregarHijo(new Nodo.default("(","("));
                                                                                this.$.agregarHijo($$[$0-2]);
                                                                                this.$.agregarHijo(new Nodo.default(")",""));
                                                                                this.$.agregarHijo(new Nodo.default(";",";"));
                                                                                
break;
case 74:
this.$=new Nodo.default("DECLARACION_ASIG_FOR","");
                                                                            this.$.agregarHijo(new Nodo.default("int","RINT"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 75:
this.$= new Nodo.default("DECLARACION_ASIG_FOR","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0-2],"IDENTIFICADOR"));
                                                                            this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"EXPRESION"));
                                                                            
break;
case 76:
this.$= new Nodo.default("ACTUALIZACION_FOR","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 77:
this.$= new Nodo.default("ACTUALIZACION_FOR","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0-1],"IDENTIFICADOR"));
                                                                            this.$.agregarHijo(new Nodo.default("++","INCREMENTO"));
                                                                            
break;
case 78:
this.$ = new Nodo.default("ACTUALIZACION_FOR","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0-1],"IDENTIFICADOR"));
                                                                            this.$.agregarHijo(new Nodo.default("--","DECREMENTO"));
                                                                            
break;
case 79:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"ENTERO"));
break;
case 80:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"CADENA"));
break;
case 81:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"CARACTER"));
break;
case 82:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"DECIMAL"));
break;
case 83:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"IDENTIFICADOR"));
break;
case 84: case 85:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],""));
break;
case 86:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("+","MAS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 87:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("-","MENOS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 88:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("*","MULTIPLICACION"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 89:
this.$ = new Nodo.default("/","DIVISION");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("+","MAS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 90:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("%","MODULO"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 91:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("^","POTENCIA"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 92:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default("-","NEGATIVO"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 93:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            
break;
case 94:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("||","OR"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 95:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("&&","AND"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 96:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default("!","NOT"));
                                                                            this.$.agregarHijo($$[$01]);
                                                                            
break;
case 97:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("==","IGUALIGUAL"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 98:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("!=","DIFERENTE"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 99:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("<","MENOR"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 100:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(">","MAYOR"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 101:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("<=","MENOR O IGUAL"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 102:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(">=","MAYOR O IGUAL"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 103:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default("++","INCREMENTO"));
                                                                            
break;
case 104:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default("--","DECREMENTO"));
                                                                            
break;
case 105: case 108: case 109:
;
break;
case 106: case 107:
this.$=$$[$0];
break;
case 110:
this.$ = new Nodo.default("OPERADOR_TERNARIO","");
                                                                            this.$.agregarHijo($$[$0-4]);
                                                                            this.$.agregarHijo(new Nodo.default("?","INTERROGACION"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 111:
this.$= new Nodo.default("CASTEOS","");
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo(new Nodo.default("int","RINT"));
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 112:
this.$= new Nodo.default("CASTEOS","");
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo(new Nodo.default("float","RFLOAT"));
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 113:
this.$= new Nodo.default("CASTEOS","");
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo(new Nodo.default("string","RSTRING"));
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 114:
this.$= new Nodo.default("CASTEOS","");
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo(new Nodo.default("bool","RBOOL"));
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 115:
this.$= new Nodo.default("CASTEOS","");
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo(new Nodo.default("char","RCHAR"));
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:28,50:$Vc,54:$Vd,55:$Ve,59:$Vf,60:$Vg,63:$Vh},{1:[3]},{5:[1,36],6:37,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:28,50:$Vc,54:$Vd,55:$Ve,59:$Vf,60:$Vg,63:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),{8:[1,38]},o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),{8:[1,39]},{8:[1,40]},o($Vi,[2,18]),o($Vi,[2,19]),o($Vi,[2,20]),{25:[1,41]},{25:[1,42]},{24:$Vj,42:43},{24:$Vj,42:45},{24:$Vj,42:46},{24:$Vj,42:47},{24:$Vj,42:48},{28:$Vk,43:[1,49]},o($Vl,$Vm,{25:[1,54],44:[1,51],46:[1,52],47:[1,53]}),{25:[1,55]},{25:[1,56]},{25:[1,57]},{25:[1,58]},{33:59,48:$Vn},{8:[1,61],22:73,24:$Vo,25:$Vp,29:62,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,5]),o($Vi,[2,16]),o($Vi,[2,17]),{22:73,24:$Vo,25:$Vp,29:78,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:79,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{8:[1,81],28:$Vk,43:[1,80]},o($VA,$Vm),{8:[1,83],28:$Vk,43:[1,82]},{8:[1,85],28:$Vk,43:[1,84]},{8:[1,87],28:$Vk,43:[1,86]},{8:[1,89],28:$Vk,43:[1,88]},{22:73,24:$Vo,25:$Vp,29:90,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{24:[1,91]},{22:73,24:$Vo,25:$Vp,29:92,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{8:[1,93]},{8:[1,94]},{22:73,24:$Vo,25:$Vp,26:[1,95],27:96,29:98,30:97,34:99,35:$VB,36:$VC,37:$VD,38:$VE,39:$VF,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:105,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:106,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:107,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{24:[1,110],35:[1,109],61:108},{59:[1,111],64:[1,112]},{2:$V0,4:113,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:28,49:[1,114],50:$Vc,54:$Vd,55:$Ve,59:$Vf,60:$Vg,63:$Vh},o($Vi,[2,63]),{8:[1,115],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},o($VV,[2,79]),o($VV,[2,80]),o($VV,[2,81]),o($VV,[2,82]),o($VV,[2,83],{25:[1,133],46:[1,131],47:[1,132]}),o($VV,[2,84]),o($VV,[2,85]),{22:73,24:$Vo,25:$Vp,29:134,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:135,35:[1,136],36:[1,138],37:[1,140],65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz,91:[1,137],92:[1,139]},{22:73,24:$Vo,25:$Vp,29:141,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},o($VV,[2,105]),o($VV,[2,106]),o($VV,[2,107]),o($VV,[2,108]),o($VV,[2,109]),{26:[1,142],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{26:[1,143],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{22:73,24:$Vo,25:$Vp,29:144,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},o($Vi,[2,38]),{22:73,24:$Vo,25:$Vp,29:145,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},o($Vi,[2,39]),{22:73,24:$Vo,25:$Vp,29:146,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},o($Vi,[2,41]),{22:73,24:$Vo,25:$Vp,29:147,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},o($Vi,[2,40]),{22:73,24:$Vo,25:$Vp,29:148,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},o($Vi,[2,42]),{8:[1,149],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},o($VA,[2,55]),{45:[1,150],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},o($Vi,[2,46]),o($Vi,[2,47]),{8:$VW,31:[1,152],33:153,48:$Vn},{26:[1,154],28:[1,155]},{26:[1,156],28:[1,157]},o($VX,[2,24],{71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU}),{24:[1,158]},{24:[2,31]},{24:[2,32]},{24:[2,33]},{24:[2,34]},{24:[2,35]},{26:[1,159],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{26:[1,160],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{26:[1,161],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{8:[1,162]},{24:$Vj,42:163},{43:[1,164]},{25:[1,165]},{25:[1,166]},{6:37,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:28,49:[1,167],50:$Vc,54:$Vd,55:$Ve,59:$Vf,60:$Vg,63:$Vh},o($VY,[2,54]),o($Vi,[2,64]),{22:73,24:$Vo,25:$Vp,29:168,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:169,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:170,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:171,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:172,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:173,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:174,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:175,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:176,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:177,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:178,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:179,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:180,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:181,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:182,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},o($VV,[2,103]),o($VV,[2,104]),{22:73,24:$Vo,25:$Vp,26:[1,183],27:96,29:98,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},o($VV,[2,92]),{26:[1,184],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{26:[1,185]},{26:[1,186]},{26:[1,187]},{26:[1,188]},{26:[1,189]},o($VZ,[2,96],{71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT}),{8:[1,190]},{8:[1,191]},{8:[1,192],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{8:[1,193],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{8:[1,194],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{8:[1,195],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{8:[1,196],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},o($Vi,[2,43]),{43:[1,197],44:[1,198]},o($V_,[2,21]),{32:[1,199]},o($Vi,[2,28]),{8:[1,200]},{22:73,24:$Vo,25:$Vp,29:201,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{31:[1,202],33:203,48:$Vn},{34:204,35:$VB,36:$VC,37:$VD,38:$VE,39:$VF},o($VX,[2,30]),{33:205,48:$Vn},{33:206,48:$Vn},{48:[1,207]},{22:73,24:$Vo,25:$Vp,29:208,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{28:$Vk,43:[1,209]},{22:73,24:$Vo,25:$Vp,29:210,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:211,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:212,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},o($VY,[2,53]),o($V$,[2,86],{73:$VI,74:$VJ,75:$VK,76:$VL}),o($V$,[2,87],{73:$VI,74:$VJ,75:$VK,76:$VL}),o($V01,[2,88],{76:$VL}),o($V01,[2,89],{76:$VL}),o($V01,[2,90],{76:$VL}),o($VV,[2,91]),o([8,26,28,31,45,77,90],[2,94],{71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT}),o($VZ,[2,95],{71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT}),o($V11,[2,97],{71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($V11,[2,98],{71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($V11,[2,99],{71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($V11,[2,100],{71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($V11,[2,101],{71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),o($V11,[2,102],{71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL}),{31:[1,213],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{8:$VW},o($VV,[2,93]),{22:73,24:$Vo,25:$Vp,29:214,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:215,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:216,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:217,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:218,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},o($Vi,[2,36]),o($Vi,[2,37]),o($Vi,[2,48]),o($Vi,[2,49]),o($Vi,[2,50]),o($Vi,[2,51]),o($Vi,[2,52]),{22:73,24:$Vo,25:$Vp,29:219,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{22:73,24:$Vo,25:$Vp,29:220,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{33:221,48:$Vn},o($V_,[2,22]),o($VX,[2,23],{71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU}),{32:[1,222]},o($Vi,[2,26]),{24:[1,223]},o($Vi,[2,57],{52:225,51:[1,224],53:[1,226]}),o($Vi,[2,70]),{56:227,57:[1,228],58:[1,229]},{8:[1,230],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{22:73,24:$Vo,25:$Vp,29:231,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{8:[2,75],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{26:[1,232],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{26:[1,233],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{22:73,24:$Vo,25:$Vp,29:234,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},o($VV,[2,111]),o($VV,[2,112]),o($VV,[2,113]),o($VV,[2,114]),o($VV,[2,115]),{8:[1,235],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{45:[1,236],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},o($Vi,[2,27]),{33:237,48:$Vn},o($VX,[2,29]),{33:238,48:$Vn},o($Vi,[2,59],{51:[1,239],53:[1,240]}),{25:[1,241]},{49:[1,242],57:[1,243],58:[1,244]},{31:[1,245]},{22:73,24:$Vo,25:$Vp,29:246,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{24:[1,249],42:248,62:247},{8:[2,74],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{8:[1,250]},{8:[1,251]},o([8,26,28,31,45,90],[2,110],{71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT}),o($Vi,[2,44]),{43:[1,252]},o($Vi,[2,25]),o($Vi,[2,58]),{33:253,48:$Vn},{25:[1,254]},{22:73,24:$Vo,25:$Vp,29:255,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},o($Vi,[2,65]),{31:[1,256]},{22:73,24:$Vo,25:$Vp,29:257,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{2:$V0,4:258,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:28,50:$Vc,54:$Vd,55:$Ve,59:$Vf,60:$Vg,63:$Vh},{31:[1,259],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{26:[1,260]},{28:$Vk,43:[1,261]},o($Vl,$Vm,{46:[1,262],47:[1,263]}),o($Vi,[2,72]),o($Vi,[2,73]),{22:73,24:$Vo,25:$Vp,29:264,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},o($Vi,[2,60]),{22:73,24:$Vo,25:$Vp,29:265,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{26:[1,266],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{2:$V0,4:267,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:28,50:$Vc,54:$Vd,55:$Ve,59:$Vf,60:$Vg,63:$Vh},{31:[1,268],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{6:37,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:28,49:[1,269],50:$Vc,54:$Vd,55:$Ve,59:$Vf,60:$Vg,63:$Vh},{2:$V0,4:270,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:28,50:$Vc,54:$Vd,55:$Ve,59:$Vf,60:$Vg,63:$Vh},{33:271,48:$Vn},{22:73,24:$Vo,25:$Vp,29:272,65:$Vq,66:$Vr,67:$Vs,68:$Vt,69:$Vu,70:$Vv,72:$Vw,79:$Vx,86:74,87:75,88:$Vy,89:$Vz},{26:[2,77]},{26:[2,78]},{8:[1,273],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{26:[1,274],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},{33:275,48:$Vn},{6:37,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:28,49:[1,276],50:$Vc,54:$Vd,55:$Ve,59:$Vf,60:$Vg,63:$Vh},{2:$V0,4:277,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,42:28,50:$Vc,54:$Vd,55:$Ve,59:$Vf,60:$Vg,63:$Vh},o($Vi,[2,67]),o($V21,[2,69],{9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,21:18,22:19,23:20,42:28,6:37,19:$V2,20:$V3,24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,50:$Vc,54:$Vd,55:$Ve,59:$Vf,60:$Vg,63:$Vh}),o($Vi,[2,71]),{26:[2,76],71:$VG,72:$VH,73:$VI,74:$VJ,75:$VK,76:$VL,77:$VM,78:$VN,80:$VO,81:$VP,82:$VQ,83:$VR,84:$VS,85:$VT,90:$VU},o($Vi,[2,45]),{33:278,48:$Vn},o($V31,[2,62]),o($Vi,[2,66]),o($V21,[2,68],{9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,21:18,22:19,23:20,42:28,6:37,19:$V2,20:$V3,24:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,40:$Va,41:$Vb,50:$Vc,54:$Vd,55:$Ve,59:$Vf,60:$Vg,63:$Vh}),o($V31,[2,61])],
defaultActions: {36:[2,1],100:[2,31],101:[2,32],102:[2,33],103:[2,34],104:[2,35],262:[2,77],263:[2,78]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo js
    const Nodo = require('./Nodo');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://comentario unilinea
break;
case 1://comentario multilinea
break;
case 2://EXPACIOS EN BLANCO
break;
case 3:console.log(yy_.yytext);return 35
break;
case 4:return 38;
break;
case 5:return 39;
break;
case 6:return 37;
break;
case 7:return 36;
break;
case 8:return 69;
break;
case 9:return 70;
break;
case 10:return 50;
break;
case 11:return 51;
break;
case 12:return 53;
break;
case 13:return 55;
break;
case 14:return 58;
break;
case 15:return 57;
break;
case 16:return 19;
break;
case 17:return 59;
break;
case 18:return 60;
break;
case 19:return 63;
break;
case 20:return 64;
break;
case 21:return 20;
break;
case 22:return 54;
break;
case 23:return 32;
break;
case 24:return 40;
break;
case 25:return 41;
break;
case 26:return 'RTOLOWER';
break;
case 27:return 'RTOUPPER';
break;
case 28:return 'RROUND';
break;
case 29:return 'RLENGTH';
break;
case 30:return 'RTYPEOF';
break;
case 31:return 'RTOSTRING';
break;
case 32:return 'RTOCHARARRAY';
break;
case 33:return 'RPUSH';
break;
case 34:return 'RPOP';
break;
case 35:return 'RRUN';
break;
case 36:return 'RNEW';
break;
case 37:return 46;
break;
case 38:return 47;
break;
case 39:return 75;
break;
case 40:return 85;
break;
case 41:return 84;
break;
case 42:return 80;
break;
case 43:return 81;
break;
case 44:return 83;
break;
case 45:return 82;
break;
case 46:return 71;
break;
case 47:return 72;
break;
case 48:return 73;
break;
case 49:return 74;
break;
case 50:return 76;
break;
case 51:console.log(yy_.yytext);return 43;
break;
case 52:return 77;
break;
case 53:return 78;
break;
case 54:return 79;
break;
case 55:return 90;
break;
case 56:return 31;
break;
case 57:return 25;
break;
case 58:return 26;
break;
case 59:console.log(yy_.yytext);return 8;
break;
case 60:return 48;
break;
case 61:return 49;
break;
case 62:return 28;
break;
case 63:return 'PUNTO';
break;
case 64:return 44;
break;
case 65:return 45;
break;
case 66: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 66; 
break;
case 67:console.log(yy_.yytext);return 68;
break;
case 68:console.log(yy_.yytext);return 65;
break;
case 69: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 67; 
break;
case 70:console.log(yy_.yytext);return 24;
break;
case 71:return 5;
break;
case 72:return 7;
break;
}
},
rules: [/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:new\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[\"](((\\')|(\\")|(\\n)|(\\t)|(\\))|[^\\\"\n])*[\"])/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:'(([^\"\'\\\\]{0,1}|\\'|\\"|\\n|\\r|\\t|\\\\))')/i,/^(?:([a-zA-Z_$])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = AST;
exports.Parser = AST.Parser;
exports.parse = function () { return AST.parse.apply(AST, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}