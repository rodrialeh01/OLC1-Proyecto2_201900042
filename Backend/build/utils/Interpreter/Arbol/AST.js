/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var AST = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[1,14],$V3=[1,15],$V4=[1,31],$V5=[1,32],$V6=[1,35],$V7=[1,34],$V8=[1,33],$V9=[1,36],$Va=[1,19],$Vb=[1,20],$Vc=[1,25],$Vd=[1,30],$Ve=[1,27],$Vf=[1,26],$Vg=[1,28],$Vh=[1,29],$Vi=[5,17,18,26,37,38,39,40,41,42,43,50,55,59,60,62,63,64,65,68],$Vj=[1,51],$Vk=[1,58],$Vl=[1,62],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,59],$Vr=[1,60],$Vs=[1,61],$Vt=[1,63],$Vu=[1,67],$Vv=[1,68],$Vw=[30,47],$Vx=[2,69],$Vy=[1,75],$Vz=[1,85],$VA=[1,99],$VB=[1,100],$VC=[1,101],$VD=[1,102],$VE=[1,103],$VF=[1,104],$VG=[1,105],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[1,111],$VN=[1,112],$VO=[1,113],$VP=[8,28,30,33,46,50,76,77,78,79,80,81,82,83,85,86,87,88,89,90,95],$VQ=[1,130],$VR=[1,131],$VS=[1,132],$VT=[1,133],$VU=[1,134],$VV=[8,30,47],$VW=[5,17,18,26,37,38,39,40,41,42,43,50,55,56,58,59,60,62,63,64,65,68,69],$VX=[8,28,30,33,46,50,82,83,95],$VY=[2,23],$VZ=[1,191],$V_=[28,30,50],$V$=[8,28,30,33,46,50,76,77,82,83,85,86,87,88,89,90,95],$V01=[8,28,30,33,46,50,76,77,78,79,80,82,83,85,86,87,88,89,90,95],$V11=[8,28,30,33,46,50,82,83,85,86,87,88,89,90,95],$V21=[28,30],$V31=[50,62,63],$V41=[5,17,18,26,37,38,39,40,41,42,43,50,55,56,58,59,60,62,63,64,65,68];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"AMBITO_GLOBAL":6,"INVALID":7,"PTCOMA":8,"IMPRIMIR":9,"DECLARACION_VARIABLES":10,"SENTENCIA_IF":11,"CICLO_WHILE":12,"SENTENCIA_SWITCH":13,"CICLO_FOR":14,"CICLO_DO_WHILE":15,"CICLO_DO_UNTIL":16,"RBREAK":17,"RCONTINUE":18,"INS_RETURN":19,"LLAMADA":20,"METODO":21,"DECLARACION":22,"ASIGNACION":23,"DECLARACION_ASIGNACION":24,"DECLARACION_VECTOR1":25,"IDENTIFICADOR":26,"PARABRE":27,"PARCIERRA":28,"LISTA_EXPRESIONES":29,"COMA":30,"EXPRESION":31,"LISTA_PARAMETROS":32,"DOSPUNTOS":33,"RVOID":34,"ENCAPSULAMIENTO":35,"TIPO_DATO":36,"RINT":37,"RSTRING":38,"RCHAR":39,"RDOUBLE":40,"RBOOLEAN":41,"RPRINT":42,"RPRINTLN":43,"LISTA_IDENTIFICADORES":44,"CORABRE":45,"CORCIERRA":46,"IGUAL":47,"RNEW":48,"LLAVEA":49,"LLAVEC":50,"RCORABRE":51,"RTOCHARARRAY":52,"INCREMENTO":53,"DECREMENTO":54,"RIF":55,"RELSE":56,"LISTA_ELIF":57,"RELIF":58,"RRETURN":59,"RSWITCH":60,"LISTA_CASES":61,"RDEFAULT":62,"RCASE":63,"RWHILE":64,"RFOR":65,"DECLARACION_ASIG_FOR":66,"ACTUALIZACION_FOR":67,"RDO":68,"RUNTIL":69,"ENTERO":70,"CADENA":71,"CARACTER":72,"DECIMAL":73,"RTRUE":74,"RFALSE":75,"MAS":76,"MENOS":77,"MULTIPLICACION":78,"DIVISION":79,"MODULO":80,"POTENCIA":81,"OR":82,"AND":83,"NOT":84,"IGUALIGUAL":85,"DIFERENTE":86,"MENOR":87,"MAYOR":88,"MENOROIGUAL":89,"MAYOROIGUAL":90,"OPERADOR_TERNARIO":91,"CASTEOS":92,"ACCESO_VECTORES":93,"FUNCIONES_NATIVAS":94,"INTERROGACION":95,"RFLOAT":96,"RBOOL":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"INVALID",8:"PTCOMA",17:"RBREAK",18:"RCONTINUE",26:"IDENTIFICADOR",27:"PARABRE",28:"PARCIERRA",30:"COMA",33:"DOSPUNTOS",34:"RVOID",37:"RINT",38:"RSTRING",39:"RCHAR",40:"RDOUBLE",41:"RBOOLEAN",42:"RPRINT",43:"RPRINTLN",45:"CORABRE",46:"CORCIERRA",47:"IGUAL",48:"RNEW",49:"LLAVEA",50:"LLAVEC",51:"RCORABRE",52:"RTOCHARARRAY",53:"INCREMENTO",54:"DECREMENTO",55:"RIF",56:"RELSE",58:"RELIF",59:"RRETURN",60:"RSWITCH",62:"RDEFAULT",63:"RCASE",64:"RWHILE",65:"RFOR",68:"RDO",69:"RUNTIL",70:"ENTERO",71:"CADENA",72:"CARACTER",73:"DECIMAL",74:"RTRUE",75:"RFALSE",76:"MAS",77:"MENOS",78:"MULTIPLICACION",79:"DIVISION",80:"MODULO",81:"POTENCIA",82:"OR",83:"AND",84:"NOT",85:"IGUALIGUAL",86:"DIFERENTE",87:"MENOR",88:"MAYOR",89:"MENOROIGUAL",90:"MAYOROIGUAL",93:"ACCESO_VECTORES",94:"FUNCIONES_NATIVAS",95:"INTERROGACION",96:"RFLOAT",97:"RBOOL"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,1],[10,1],[10,1],[10,1],[10,1],[20,3],[20,4],[29,3],[29,1],[21,7],[21,5],[21,6],[21,4],[32,4],[32,2],[36,1],[36,1],[36,1],[36,1],[36,1],[9,5],[9,5],[22,3],[22,3],[22,3],[22,3],[22,3],[25,11],[25,9],[25,11],[25,9],[25,11],[25,9],[25,11],[25,9],[25,10],[25,11],[25,9],[23,4],[23,7],[23,10],[23,3],[23,3],[24,5],[24,5],[24,5],[24,5],[24,5],[35,3],[35,2],[44,3],[44,1],[11,5],[11,7],[11,6],[11,8],[57,6],[57,5],[19,2],[19,3],[13,7],[13,10],[13,9],[61,5],[61,4],[12,5],[14,9],[15,7],[16,7],[66,4],[66,3],[67,3],[67,2],[67,2],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,1],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,3],[31,3],[31,3],[31,2],[31,3],[31,3],[31,3],[31,3],[31,3],[31,3],[31,2],[31,2],[31,1],[31,1],[31,1],[31,1],[31,1],[91,5],[92,4],[92,4],[92,4],[92,4],[92,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
this.$=new Nodo.default("INICIO","");
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            return this.$;
                                                                            
break;
case 2:
this.$=new Nodo.default("INSTRUCCIONES","");
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 3:
this.$=new Nodo.default("INSTRUCCIONES","");
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 4:
this.$=new Nodo.default("INSTRUCCIONES","");
                                                                            this.$.agregarHijo(new Nodo.default("ERROR LEXICO",""));
                                                                            
break;
case 5:
this.$=new Nodo.default("INSTRUCCIONES","");
                                                                            this.$.agregarHijo(new Nodo.default("ERROR SEMANTICO",""));
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 16: case 18:
this.$=new Nodo.default("AMBITO LOCAL","");
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 14:
this.$=new Nodo.default("AMBITO LOCAL","");
                                                                            this.$.agregarHijo(new Nodo.default("break","BREAK"));
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 15:
this.$=new Nodo.default("AMBITO LOCAL","");
                                                                            this.$.agregarHijo(new Nodo.default("continue","CONTINUE"));
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 17:
this.$=new Nodo.default("AMBITO LOCAL","");
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 19: case 20: case 21: case 22:
this.$=new Nodo.default("DECLARACION VARIABLES","");
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 23:
this.$= new Nodo.default("LLAMADA","");
                                                                        this.$.agregarHijo(new Nodo.default("IDENTIFICADOR", $$[$0-2]));
                                                                        this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                        this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                        
break;
case 24:
this.$= new Nodo.default("LLAMADA","");
                                                                        this.$.agregarHijo(new Nodo.default("IDENTIFICADOR", $$[$0-3]));
                                                                        this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                        this.$.agregarHijo($$[$0-1]);
                                                                        this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                        
break;
case 25:
this.$ = new Nodo.default("LISTA_EXPRESIONES", "");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(",","COMA"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 26:
this.$ = new Nodo.default("LISTA_EXPRESIONES", "");
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 27:
this.$ = new Nodo.default("METODO","");
                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-6],"IDENTIFICADOR"));
                                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                            this.$.agregarHijo($$[$0-4]);
                                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                            this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                                            this.$.agregarHijo(new Nodo.default("void","RVOID"));
                                                                                            this.$.agregarHijo($$[$0]);
                                                                                            
break;
case 28:
this.$ = new Nodo.default("METODO","");
                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-4],"IDENTIFICADOR"));
                                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                            this.$.agregarHijo($$[$0-2]);
                                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                            this.$.agregarHijo($$[$0]);
                                                                                            
break;
case 29:
this.$ = new Nodo.default("METODO","");
                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-5],"IDENTIFICADOR"));
                                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                            this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                                            this.$.agregarHijo(new Nodo.default("void","RVOID"));
                                                                                            this.$.agregarHijo($$[$0]);
                                                                                            
break;
case 30:
this.$ = new Nodo.default("METODO","");
                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-3],"IDENTIFICADOR"));
                                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                            this.$.agregarHijo($$[$0]);
                                                                                            
break;
case 31:
this.$=new Nodo.default("LISTA_PARAMETROS","");
                                                                            this.$.agregarHijo($$[$0-3]);
                                                                            this.$.agregarHijo(new Nodo.default(",","COMA"));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"IDENTIFICADOR"));
                                                                            
break;
case 32:
this.$=new Nodo.default("LISTA_PARAMETROS","");
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"IDENTIFICADOR"));
                                                                            
break;
case 33:
this.$=new Nodo.default("TIPO_DATO","");
                                                                            this.$.agregarHijo(new Nodo.default("int","RINT"));
                                                                            
break;
case 34:
this.$=new Nodo.default("TIPO_DATO","");
                                                                            this.$.agregarHijo(new Nodo.default("string","RSTRING"));
                                                                            
break;
case 35:
this.$=new Nodo.default("TIPO_DATO","");
                                                                            this.$.agregarHijo(new Nodo.default("char","RCHAR"));
                                                                            
break;
case 36:
this.$=new Nodo.default("TIPO_DATO","");
                                                                            this.$.agregarHijo(new Nodo.default("double","RDOUBLE"));
                                                                            
break;
case 37:
this.$=new Nodo.default("TIPO_DATO","");
                                                                            this.$.agregarHijo(new Nodo.default("boolean","RBOOLEAN"));
                                                                            
break;
case 38:
this.$=new Nodo.default("IMPRIMIR","");
                                                                            this.$.agregarHijo(new Nodo.default("print","RPRINT"));
                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 39:
this.$=new Nodo.default("IMPRIMIR","");
                                                                            this.$.agregarHijo(new Nodo.default("println","RPRINT"));
                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 40:
this.$=new Nodo.default("DECLARACION","");
                                                                            this.$.agregarHijo(new Nodo.default("int",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 41:
this.$=new Nodo.default("DECLARACION","");
                                                                            this.$.agregarHijo(new Nodo.default("double",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 42:
this.$=new Nodo.default("DECLARACION","");
                                                                            this.$.agregarHijo(new Nodo.default("char",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 43:
this.$=new Nodo.default("DECLARACION","");
                                                                            this.$.agregarHijo(new Nodo.default("string",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 44:
this.$=new Nodo.default("DECLARACION","");
                                                                            this.$.agregarHijo(new Nodo.default("boolean",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 45:
this.$=new Nodo.default("DECLARACION_VECTOR1","");
                                                                                                                        this.$.agregarHijo(new Nodo.default("int","RINT"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default($$[$0-7],"IDENTIFICADOR"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("new","RNEW"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("int","RINT"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo($$[$0-2]);
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                                        
break;
case 46:
this.$= new Nodo.default("DECLARACION_VECTOR1","");
                                                                                                                        this.$.agregarHijo(new Nodo.default("int","RINT"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default($$[$0-6],"IDENTIFICADOR"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("{","LLAVEA"));
                                                                                                                        this.$.agregarHijo($$[$0-2]);
                                                                                                                        this.$.agregarHijo(new Nodo.default("}","LLAVEC"));
                                                                                                                        this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                                        
break;
case 47:
this.$=new Nodo.default("DECLARACION_VECTOR1","");
                                                                                                                        this.$.agregarHijo(new Nodo.default("double","RDOUBLE"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default($$[$0-8],"IDENTIFICADOR"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("new","RNEW"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("double","RDOUBLE"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo($$[$0-2]);
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                                        
break;
case 48:
this.$=new Nodo.default("DECLARACION_VECTOR1","");
                                                                                                                        this.$.agregarHijo(new Nodo.default("double","RDOUBLE"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default($$[$0-6],"IDENTIFICADOR"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("{","LLAVEA"));
                                                                                                                        this.$.agregarHijo($$[$0-2]);
                                                                                                                        this.$.agregarHijo(new Nodo.default("}","LLAVEC"));
                                                                                                                        this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                                        
break;
case 49:
this.$=new Nodo.default("DECLARACION_VECTOR1","");
                                                                                                                        this.$.agregarHijo(new Nodo.default("String","RSTRING"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default($$[$0-8],"IDENTIFICADOR"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("new","RNEW"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("String","RSTRING"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo($$[$0-2]);
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                                        
break;
case 50:
this.$=new Nodo.default("DECLARACION_VECTOR1","");
                                                                                                                        this.$.agregarHijo(new Nodo.default("String","RSTRING"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default($$[$0-6],"IDENTIFICADOR"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("{","LLAVEA"));
                                                                                                                        this.$.agregarHijo($$[$0-2]);
                                                                                                                        this.$.agregarHijo(new Nodo.default("}","LLAVEC"));
                                                                                                                        this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                                        
break;
case 51:
this.$=new Nodo.default("DECLARACION_VECTOR1","");
                                                                                                                        this.$.agregarHijo(new Nodo.default("char","RCHAR"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default($$[$0-8],"IDENTIFICADOR"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("new","RNEW"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("char","RCHAR"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo($$[$0-2]);
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                                        
break;
case 52:
this.$=new Nodo.default("DECLARACION_VECTOR1","");
                                                                                                                        this.$.agregarHijo(new Nodo.default("char","RCHAR"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default($$[$0-6],"IDENTIFICADOR"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("{","LLAVEA"));
                                                                                                                        this.$.agregarHijo($$[$0-2]);
                                                                                                                        this.$.agregarHijo(new Nodo.default("}","LLAVEC"));
                                                                                                                        this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                                        
break;
case 53:
this.$=new Nodo.default("DECLARACION_VECTOR1","");
                                                                                                                        this.$.agregarHijo(new Nodo.default("char","RCHAR"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default($$[$0-7],"IDENTIFICADOR"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("toCharArray","RTOCHARARRAY"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                                        this.$.agregarHijo($$[$0-3]);
                                                                                                                        this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                                        
break;
case 54:
this.$=new Nodo.default("DECLARACION_VECTOR1","");
                                                                                                                        this.$.agregarHijo(new Nodo.default("boolean","RBOOLEAN"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default($$[$0-8],"IDENTIFICADOR"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("new","RNEW"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("boolean","RBOOLEAN"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo($$[$0-2]);
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                                        
break;
case 55:
this.$=new Nodo.default("DECLARACION_VECTOR1","");
                                                                                                                        this.$.agregarHijo(new Nodo.default("boolean","RBOOLEAN"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                                        this.$.agregarHijo(new Nodo.default($$[$0-6],"IDENTIFICADOR"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                                                        this.$.agregarHijo(new Nodo.default("{","LLAVEA"));
                                                                                                                        this.$.agregarHijo($$[$0-2]);
                                                                                                                        this.$.agregarHijo(new Nodo.default("}","LLAVEC"));
                                                                                                                        this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                                        
break;
case 56:
this.$=new Nodo.default("ASIGNACION","");
                                                                                                            this.$.agregarHijo($$[$0-3]);
                                                                                                            this.$.agregarHijo(new Nodo.default("IGUAL","="));
                                                                                                            this.$.agregarHijo($$[$0-1]);
                                                                                                            this.$.agregarHijo(new Nodo.default("PTCOMA",";"));
                                                                                                            
break;
case 57:
this.$=new Nodo.default("ASIGNACION","");
                                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-6],"IDENTIFICADOR"));
                                                                                                            this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                            this.$.agregarHijo($$[$0-4]);
                                                                                                            this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                            this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                                            this.$.agregarHijo($$[$0-1]);
                                                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                            
break;
case 58:
this.$=new Nodo.default("ASIGNACION","");
                                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-9],"IDENTIFICADOR"));
                                                                                                            this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                            this.$.agregarHijo($$[$0-7]);
                                                                                                            this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                            this.$.agregarHijo(new Nodo.default("[","CORABRE"));
                                                                                                            this.$.agregarHijo($$[$0-4]);
                                                                                                            this.$.agregarHijo(new Nodo.default("]","CORCIERRA"));
                                                                                                            this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                                            this.$.agregarHijo($$[$0-1]);
                                                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                            
break;
case 59:
this.$=new Nodo.default("ASIGNACION","");
                                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-2],"IDENTIFICADOR"));
                                                                                                            this.$.agregarHijo(new Nodo.default("++","INCREMENTO"));
                                                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                            
break;
case 60:
this.$=new Nodo.default("ASIGNACION","");
                                                                                                            this.$.agregarHijo(new Nodo.default($$[$0-2],"IDENTIFICADOR"));
                                                                                                            this.$.agregarHijo(new Nodo.default("--","DECREMENTO"));
                                                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                                            
break;
case 61:
this.$=new Nodo.default("DECLARACION_ASIGNACION","");
                                                                                this.$.agregarHijo(new Nodo.default("int","RINT"));
                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                
break;
case 62:
this.$=new Nodo.default("DECLARACION_ASIGNACION","");
                                                                                this.$.agregarHijo(new Nodo.default("double","RDOUBLE"));
                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                
break;
case 63:
this.$=new Nodo.default("DECLARACION_ASIGNACION","");
                                                                                this.$.agregarHijo(new Nodo.default("string","RSTRING"));
                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                
break;
case 64:
this.$=new Nodo.default("DECLARACION_ASIGNACION","");
                                                                                this.$.agregarHijo(new Nodo.default("char","RCHAR"));
                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                
break;
case 65:
this.$=new Nodo.default("DECLARACION_ASIGNACION","");
                                                                                this.$.agregarHijo(new Nodo.default("int","RBOOLEAN"));
                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                                
break;
case 66:
this.$=new Nodo.default("ENCAPSULAMIENTO", "");
                                                                            this.$.agregarHijo(new Nodo.default("{", "LLAVEA"));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default("}", "LLAVEC"));
                                                                            
break;
case 67:
this.$=new Nodo.default("ENCAPSULAMIENTO", "");
                                                                            this.$.agregarHijo(new Nodo.default("{", "LLAVEA"));
                                                                            this.$.agregarHijo(new Nodo.default("}", "LLAVEC"));
                                                                            
break;
case 68:
this.$=new Nodo.default("LISTA_IDENTIFICADORES", "");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(",", "COMA"));
                                                                            this.$.agregarHijo(new Nodo.default($$[$0], "IDENTIFICADOR"));
                                                                            
break;
case 69:
this.$=new Nodo.default("LISTA_IDENTIFICADORES", "");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0], "IDENTIFICADOR"));
                                                                            
break;
case 70:
this.$ = new Nodo.default("SENTENCIA IF","");
                                                                                                this.$.agregarHijo(new Nodo.default("if","IF"));
                                                                                                this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                this.$.agregarHijo($$[$0-2]);
                                                                                                this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                this.$.agregarHijo($$[$0]);
                                                                                                
break;
case 71:
this.$ = new Nodo.default("SENTENCIA IF","");
                                                                                                this.$.agregarHijo(new Nodo.default("if","IF"));
                                                                                                this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                this.$.agregarHijo($$[$0-4]);
                                                                                                this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                this.$.agregarHijo($$[$0-2]);
                                                                                                this.$.agregarHijo(new Nodo.default("else","RELSE"));
                                                                                                this.$.agregarHijo($$[$0]);
                                                                                                
break;
case 72:
this.$ = new Nodo.default("SENTENCIA IF","");
                                                                                                this.$.agregarHijo(new Nodo.default("if","IF"));
                                                                                                this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                                this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                this.$.agregarHijo($$[$0-1]);
                                                                                                this.$.agregarHijo($$[$0]);
                                                                                                
break;
case 73:
this.$ = new Nodo.default("SENTENCIA IF","");
                                                                                                this.$.agregarHijo(new Nodo.default("if","IF"));
                                                                                                this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                this.$.agregarHijo($$[$0-5]);
                                                                                                this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                this.$.agregarHijo($$[$0-3]);
                                                                                                this.$.agregarHijo($$[$0-2]);
                                                                                                this.$.agregarHijo(new Nodo.default("else","RELSE"));
                                                                                                this.$.agregarHijo($$[$0]);
                                                                                                
break;
case 74:
this.$ = new Nodo.default("LISTA ELIF","");
                                                                            this.$.agregarHijo($$[$0-5]);
                                                                            this.$.agregarHijo(new Nodo.default("elif","ELIF"));
                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 75:
this.$ = new Nodo.default("LISTA ELIF","");
                                                                            this.$.agregarHijo(new Nodo.default("elif","ELIF"));
                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 76:
this.$=new Nodo.default("INS RETURN","");
                                                                            this.$.agregarHijo(new Nodo.default("return","RETURN"));
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 77:
this.$=new Nodo.default("INS RETURN","");
                                                                            this.$.agregarHijo(new Nodo.default("return","RETURN"));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(";","PTCOMA"));
                                                                            
break;
case 78:
this.$=new Nodo.default("SENTENCIA SWITCH","");
                                                                                                                    this.$.agregarHijo(new Nodo.default("switch","SWITCH"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                                    this.$.agregarHijo($$[$0-4]);
                                                                                                                    this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("{","LLAVEA"));
                                                                                                                    this.$.agregarHijo($$[$0-1]);
                                                                                                                    this.$.agregarHijo(new Nodo.default("}","LLAVEC"));
                                                                                                                    
break;
case 79:
this.$=new Nodo.default("SENTENCIA SWITCH","");
                                                                                                                    this.$.agregarHijo(new Nodo.default("switch","SWITCH"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                                    this.$.agregarHijo($$[$0-7]);
                                                                                                                    this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("{","LLAVEA"));
                                                                                                                    this.$.agregarHijo($$[$0-4]);
                                                                                                                    this.$.agregarHijo(new Nodo.default("default","RDEFAULT"));
                                                                                                                    this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                                                                    this.$.agregarHijo($$[$0-1]);
                                                                                                                    this.$.agregarHijo(new Nodo.default("}","LLAVEC"));
                                                                                                                    
break;
case 80:
this.$=new Nodo.default("SENTENCIA SWITCH","");
                                                                                                                    this.$.agregarHijo(new Nodo.default("switch","SWITCH"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                                                                    this.$.agregarHijo($$[$0-6]);
                                                                                                                    this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("{","LLAVEA"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("default","RDEFAULT"));
                                                                                                                    this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                                                                    this.$.agregarHijo($$[$0-1]);
                                                                                                                    this.$.agregarHijo(new Nodo.default("}","LLAVEC"));
                                                                                                                    
break;
case 81:
this.$= new Nodo.default("LISTA_CASES","");
                                                                            this.$.agregarHijo($$[$0-4]);
                                                                            this.$.agregarHijo(new Nodo.default("case","RCASE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 82:
this.$= new Nodo.default("LISTA_CASES","");
                                                                            this.$.agregarHijo(new Nodo.default("case","RCASE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 83:
this.$ = new Nodo.default("CICLO WHILE","");
                                                                            this.$.agregarHijo(new Nodo.default("while","WHILE"));
                                                                            this.$.agregarHijo(new Nodo.default("(","PARABRE"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 84:
this.$= new Nodo.default("CICLO FOR","");
                                                                                                                    this.$.agregarHijo(new Nodo.default("for","FOR"));
                                                                                                                    this.$.agregarHijo(new Nodo.default("(","("));
                                                                                                                    this.$.agregarHijo($$[$0-6]);
                                                                                                                    this.$.agregarHijo(new Nodo.default(";",";"));
                                                                                                                    this.$.agregarHijo($$[$0-4]);
                                                                                                                    this.$.agregarHijo(new Nodo.default(";",";"));
                                                                                                                    this.$.agregarHijo($$[$0-2]);
                                                                                                                    this.$.agregarHijo(new Nodo.default(")","PARCIERRA"));
                                                                                                                    this.$.agregarHijo($$[$0]);
                                                                                                                    
break;
case 85:
this.$= new Nodo.default("CICLO DO_WHILE", "");
                                                                                this.$.agregarHijo(new Nodo.default("do", "DO"));
                                                                                this.$.agregarHijo($$[$0-5]);
                                                                                this.$.agregarHijo(new Nodo.default("while", "WHILE"));
                                                                                this.$.agregarHijo(new Nodo.default("(", "("));
                                                                                this.$.agregarHijo($$[$0-2]);
                                                                                this.$.agregarHijo(new Nodo.default(")", ")"));
                                                                                this.$.agregarHijo(new Nodo.default(";", ";"));
                                                                                
break;
case 86:
this.$= new Nodo.default("CICLO DO_UNTIL","");
                                                                                this.$.agregarHijo(new Nodo.default("do","DO"));
                                                                                this.$.agregarHijo($$[$0-5]);
                                                                                this.$.agregarHijo(new Nodo.default("until","UNTIL"));
                                                                                this.$.agregarHijo(new Nodo.default("(","("));
                                                                                this.$.agregarHijo($$[$0-2]);
                                                                                this.$.agregarHijo(new Nodo.default(")",""));
                                                                                this.$.agregarHijo(new Nodo.default(";",";"));
                                                                                
break;
case 87:
this.$=new Nodo.default("DECLARACION_ASIG_FOR","");
                                                                            this.$.agregarHijo(new Nodo.default("int","RINT"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 88:
this.$= new Nodo.default("DECLARACION_ASIG_FOR","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0-2],"IDENTIFICADOR"));
                                                                            this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"EXPRESION"));
                                                                            
break;
case 89:
this.$= new Nodo.default("ACTUALIZACION_FOR","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("=","IGUAL"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 90:
this.$= new Nodo.default("ACTUALIZACION_FOR","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0-1],"IDENTIFICADOR"));
                                                                            this.$.agregarHijo(new Nodo.default("++","INCREMENTO"));
                                                                            
break;
case 91:
this.$ = new Nodo.default("ACTUALIZACION_FOR","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0-1],"IDENTIFICADOR"));
                                                                            this.$.agregarHijo(new Nodo.default("--","DECREMENTO"));
                                                                            
break;
case 92:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"ENTERO"));
break;
case 93:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"CADENA"));
break;
case 94:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"CARACTER"));
break;
case 95:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"DECIMAL"));
break;
case 96:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],"IDENTIFICADOR"));
break;
case 97: case 98:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default($$[$0],""));
break;
case 99:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("+","MAS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 100:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("-","MENOS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 101:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("*","MULTIPLICACION"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 102:
this.$ = new Nodo.default("/","DIVISION");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("+","MAS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 103:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("%","MODULO"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 104:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("^","POTENCIA"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 105:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default("-","NEGATIVO"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 106:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            
break;
case 107:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("||","OR"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 108:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("&&","AND"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 109:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo(new Nodo.default("!","NOT"));
                                                                            this.$.agregarHijo($$[$01]);
                                                                            
break;
case 110:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("==","IGUALIGUAL"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 111:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("!=","DIFERENTE"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 112:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("<","MENOR"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 113:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(">","MAYOR"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 114:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default("<=","MENOR O IGUAL"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 115:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(">=","MAYOR O IGUAL"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 116:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default("++","INCREMENTO"));
                                                                            
break;
case 117:
this.$ = new Nodo.default("EXPRESION","");
                                                                            this.$.agregarHijo($$[$0-1]);
                                                                            this.$.agregarHijo(new Nodo.default("--","DECREMENTO"));
                                                                            
break;
case 118: case 119: case 120:
this.$=$$[$0];
break;
case 121: case 122:
;
break;
case 123:
this.$ = new Nodo.default("OPERADOR_TERNARIO","");
                                                                            this.$.agregarHijo($$[$0-4]);
                                                                            this.$.agregarHijo(new Nodo.default("?","INTERROGACION"));
                                                                            this.$.agregarHijo($$[$0-2]);
                                                                            this.$.agregarHijo(new Nodo.default(":","DOSPUNTOS"));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 124:
this.$= new Nodo.default("CASTEOS","");
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo(new Nodo.default("int","RINT"));
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 125:
this.$= new Nodo.default("CASTEOS","");
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo(new Nodo.default("float","RFLOAT"));
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 126:
this.$= new Nodo.default("CASTEOS","");
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo(new Nodo.default("string","RSTRING"));
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 127:
this.$= new Nodo.default("CASTEOS","");
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo(new Nodo.default("bool","RBOOL"));
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
case 128:
this.$= new Nodo.default("CASTEOS","");
                                                                            this.$.agregarHijo(new Nodo.default("(",""));
                                                                            this.$.agregarHijo(new Nodo.default("char","RCHAR"));
                                                                            this.$.agregarHijo(new Nodo.default(")",""));
                                                                            this.$.agregarHijo($$[$0]);
                                                                            
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V2,18:$V3,19:16,20:17,21:18,22:21,23:22,24:23,25:24,26:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:37,55:$Vc,59:$Vd,60:$Ve,64:$Vf,65:$Vg,68:$Vh},{1:[3]},{5:[1,38],6:39,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V2,18:$V3,19:16,20:17,21:18,22:21,23:22,24:23,25:24,26:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:37,55:$Vc,59:$Vd,60:$Ve,64:$Vf,65:$Vg,68:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),{8:[1,40]},o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),{8:[1,41]},{8:[1,42]},o($Vi,[2,16]),{8:[1,43]},o($Vi,[2,18]),{27:[1,44]},{27:[1,45]},o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,21]),o($Vi,[2,22]),{27:[1,46]},{27:[1,47]},{27:[1,48]},{27:[1,49]},{35:50,49:$Vj},{8:[1,52],20:64,26:$Vk,27:$Vl,31:53,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},o($Vw,$Vx,{27:[1,69],45:[1,70],53:[1,71],54:[1,72]}),{26:$Vy,44:73,45:[1,74]},{26:$Vy,44:76,45:[1,77]},{26:$Vy,44:78,45:[1,79]},{26:$Vy,44:80,45:[1,81]},{26:$Vy,44:82,45:[1,83]},{30:$Vz,47:[1,84]},{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,5]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,17]),{20:64,26:$Vk,27:$Vl,31:86,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:87,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:88,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:89,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:90,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{26:[1,93],37:[1,92],66:91},{64:[1,94],69:[1,95]},{2:$V0,4:96,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V2,18:$V3,19:16,20:17,21:18,22:21,23:22,24:23,25:24,26:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:37,50:[1,97],55:$Vc,59:$Vd,60:$Ve,64:$Vf,65:$Vg,68:$Vh},o($Vi,[2,76]),{8:[1,98],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},o($VP,[2,92]),o($VP,[2,93]),o($VP,[2,94]),o($VP,[2,95]),o($VP,[2,96],{27:[1,116],53:[1,114],54:[1,115]}),o($VP,[2,97]),o($VP,[2,98]),{20:64,26:$Vk,27:$Vl,31:117,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:118,37:[1,119],38:[1,121],39:[1,123],70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv,96:[1,120],97:[1,122]},{20:64,26:$Vk,27:$Vl,31:124,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},o($VP,[2,118]),o($VP,[2,119]),o($VP,[2,120]),o($VP,[2,121]),o($VP,[2,122]),{20:64,26:$Vk,27:$Vl,28:[1,125],29:126,31:128,32:127,36:129,37:$VQ,38:$VR,39:$VS,40:$VT,41:$VU,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:135,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{8:[1,136]},{8:[1,137]},{8:[1,138],30:$Vz,47:[1,139]},{46:[1,140]},o($VV,$Vx),{8:[1,141],30:$Vz,47:[1,142]},{46:[1,143]},{8:[1,144],30:$Vz,47:[1,145]},{46:[1,146]},{8:[1,147],30:$Vz,47:[1,148]},{46:[1,149]},{8:[1,150],30:$Vz,47:[1,151]},{46:[1,152]},{20:64,26:$Vk,27:$Vl,31:153,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{26:[1,154]},{28:[1,155],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{28:[1,156],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{28:[1,157],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{28:[1,158],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{28:[1,159],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{8:[1,160]},{26:$Vy,44:161},{47:[1,162]},{27:[1,163]},{27:[1,164]},{6:39,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V2,18:$V3,19:16,20:17,21:18,22:21,23:22,24:23,25:24,26:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:37,50:[1,165],55:$Vc,59:$Vd,60:$Ve,64:$Vf,65:$Vg,68:$Vh},o($VW,[2,67]),o($Vi,[2,77]),{20:64,26:$Vk,27:$Vl,31:166,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:167,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:168,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:169,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:170,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:171,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:172,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:173,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:174,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:175,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:176,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:177,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:178,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:179,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:180,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},o($VP,[2,116]),o($VP,[2,117]),{20:64,26:$Vk,27:$Vl,28:[1,181],29:126,31:128,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},o($VP,[2,105]),{28:[1,182],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{28:[1,183]},{28:[1,184]},{28:[1,185]},{28:[1,186]},{28:[1,187]},o($VX,[2,109],{76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN}),{8:$VY,33:[1,188],35:189,49:$Vj},{28:[1,190],30:$VZ},{28:[1,192],30:[1,193]},o($V_,[2,26],{76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO}),{26:[1,194]},{26:[2,33]},{26:[2,34]},{26:[2,35]},{26:[2,36]},{26:[2,37]},{46:[1,195],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},o($Vi,[2,59]),o($Vi,[2,60]),o($Vi,[2,40]),{20:64,26:$Vk,27:$Vl,31:196,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{26:[1,197]},o($Vi,[2,41]),{20:64,26:$Vk,27:$Vl,31:198,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{26:[1,199]},o($Vi,[2,42]),{20:64,26:$Vk,27:$Vl,31:200,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{26:[1,201]},o($Vi,[2,43]),{20:64,26:$Vk,27:$Vl,31:202,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{26:[1,203]},o($Vi,[2,44]),{20:64,26:$Vk,27:$Vl,31:204,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{26:[1,205]},{8:[1,206],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},o($VV,[2,68]),{8:[1,207]},{8:[1,208]},{35:209,49:$Vj},{35:210,49:$Vj},{49:[1,211]},{20:64,26:$Vk,27:$Vl,31:212,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{30:$Vz,47:[1,213]},{20:64,26:$Vk,27:$Vl,31:214,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:215,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:216,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},o($VW,[2,66]),o($V$,[2,99],{78:$VC,79:$VD,80:$VE,81:$VF}),o($V$,[2,100],{78:$VC,79:$VD,80:$VE,81:$VF}),o($V01,[2,101],{81:$VF}),o($V01,[2,102],{81:$VF}),o($V01,[2,103],{81:$VF}),o($VP,[2,104]),o([8,28,30,33,46,50,82,95],[2,107],{76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN}),o($VX,[2,108],{76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN}),o($V11,[2,110],{76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF}),o($V11,[2,111],{76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF}),o($V11,[2,112],{76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF}),o($V11,[2,113],{76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF}),o($V11,[2,114],{76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF}),o($V11,[2,115],{76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF}),{33:[1,217],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},o($VP,$VY),o($VP,[2,106]),{20:64,26:$Vk,27:$Vl,31:218,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:219,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:220,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:221,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:222,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{34:[1,223]},o($Vi,[2,30]),o($VP,[2,24]),{20:64,26:$Vk,27:$Vl,31:224,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{33:[1,225],35:226,49:$Vj},{36:227,37:$VQ,38:$VR,39:$VS,40:$VT,41:$VU},o($V21,[2,32]),{45:[1,229],47:[1,228]},{8:[1,230],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{47:[1,231]},{8:[1,232],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{47:[1,233]},{8:[1,234],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{47:[1,235]},{8:[1,236],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{47:[1,237]},{8:[1,238],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{47:[1,239]},o($Vi,[2,56]),o($Vi,[2,38]),o($Vi,[2,39]),o($Vi,[2,70],{57:241,56:[1,240],58:[1,242]}),o($Vi,[2,83]),{61:243,62:[1,244],63:[1,245]},{8:[1,246],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{20:64,26:$Vk,27:$Vl,31:247,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{8:[2,88],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{28:[1,248],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{28:[1,249],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{20:64,26:$Vk,27:$Vl,31:250,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},o($VP,[2,124]),o($VP,[2,125]),o($VP,[2,126]),o($VP,[2,127]),o($VP,[2,128]),{35:251,49:$Vj},o($V_,[2,25],{76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO}),{34:[1,252]},o($Vi,[2,28]),{26:[1,253]},{20:64,26:$Vk,27:$Vl,31:254,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:255,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},o($Vi,[2,61]),{48:[1,256],49:[1,257]},o($Vi,[2,62]),{48:[1,258],49:[1,259]},o($Vi,[2,64]),{48:[1,260],49:[1,261],52:[1,262]},o($Vi,[2,63]),{48:[1,263],49:[1,264]},o($Vi,[2,65]),{48:[1,265],49:[1,266]},{35:267,49:$Vj},o($Vi,[2,72],{56:[1,268],58:[1,269]}),{27:[1,270]},{50:[1,271],62:[1,272],63:[1,273]},{33:[1,274]},{20:64,26:$Vk,27:$Vl,31:275,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{26:[1,278],44:277,67:276},{8:[2,87],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{8:[1,279]},{8:[1,280]},o([8,28,30,33,46,50,95],[2,123],{76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN}),o($Vi,[2,29]),{35:281,49:$Vj},o($V21,[2,31]),{8:[1,282],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{46:[1,283],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{37:[1,284]},{20:64,26:$Vk,27:$Vl,29:285,31:128,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{40:[1,286]},{20:64,26:$Vk,27:$Vl,29:287,31:128,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{39:[1,288]},{20:64,26:$Vk,27:$Vl,29:289,31:128,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{27:[1,290]},{38:[1,291]},{20:64,26:$Vk,27:$Vl,29:292,31:128,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{41:[1,293]},{20:64,26:$Vk,27:$Vl,29:294,31:128,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},o($Vi,[2,71]),{35:295,49:$Vj},{27:[1,296]},{20:64,26:$Vk,27:$Vl,31:297,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},o($Vi,[2,78]),{33:[1,298]},{20:64,26:$Vk,27:$Vl,31:299,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{2:$V0,4:300,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V2,18:$V3,19:16,20:17,21:18,22:21,23:22,24:23,25:24,26:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:37,55:$Vc,59:$Vd,60:$Ve,64:$Vf,65:$Vg,68:$Vh},{33:[1,301],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{28:[1,302]},{30:$Vz,47:[1,303]},o($Vw,$Vx,{53:[1,304],54:[1,305]}),o($Vi,[2,85]),o($Vi,[2,86]),o($Vi,[2,27]),o($Vi,[2,57]),{47:[1,306]},{45:[1,307]},{30:$VZ,50:[1,308]},{51:[1,309]},{30:$VZ,50:[1,310]},{51:[1,311]},{30:$VZ,50:[1,312]},{20:64,26:$Vk,27:$Vl,31:313,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{51:[1,314]},{30:$VZ,50:[1,315]},{51:[1,316]},{30:$VZ,50:[1,317]},o($Vi,[2,73]),{20:64,26:$Vk,27:$Vl,31:318,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{28:[1,319],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{2:$V0,4:320,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V2,18:$V3,19:16,20:17,21:18,22:21,23:22,24:23,25:24,26:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:37,55:$Vc,59:$Vd,60:$Ve,64:$Vf,65:$Vg,68:$Vh},{33:[1,321],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{6:39,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V2,18:$V3,19:16,20:17,21:18,22:21,23:22,24:23,25:24,26:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:37,50:[1,322],55:$Vc,59:$Vd,60:$Ve,64:$Vf,65:$Vg,68:$Vh},{2:$V0,4:323,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V2,18:$V3,19:16,20:17,21:18,22:21,23:22,24:23,25:24,26:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:37,55:$Vc,59:$Vd,60:$Ve,64:$Vf,65:$Vg,68:$Vh},{35:324,49:$Vj},{20:64,26:$Vk,27:$Vl,31:325,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{28:[2,90]},{28:[2,91]},{20:64,26:$Vk,27:$Vl,31:326,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{20:64,26:$Vk,27:$Vl,31:327,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{8:[1,328]},{20:64,26:$Vk,27:$Vl,31:329,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{8:[1,330]},{20:64,26:$Vk,27:$Vl,31:331,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{8:[1,332]},{28:[1,333],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{20:64,26:$Vk,27:$Vl,31:334,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{8:[1,335]},{20:64,26:$Vk,27:$Vl,31:336,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,84:$Vt,91:65,92:66,93:$Vu,94:$Vv},{8:[1,337]},{28:[1,338],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{35:339,49:$Vj},{6:39,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V2,18:$V3,19:16,20:17,21:18,22:21,23:22,24:23,25:24,26:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:37,50:[1,340],55:$Vc,59:$Vd,60:$Ve,64:$Vf,65:$Vg,68:$Vh},{2:$V0,4:341,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V2,18:$V3,19:16,20:17,21:18,22:21,23:22,24:23,25:24,26:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,44:37,55:$Vc,59:$Vd,60:$Ve,64:$Vf,65:$Vg,68:$Vh},o($Vi,[2,80]),o($V31,[2,82],{9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,19:16,20:17,21:18,22:21,23:22,24:23,25:24,44:37,6:39,17:$V2,18:$V3,26:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,55:$Vc,59:$Vd,60:$Ve,64:$Vf,65:$Vg,68:$Vh}),o($Vi,[2,84]),{28:[2,89],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{8:[1,342],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},{46:[1,343],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},o($Vi,[2,46]),{46:[1,344],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},o($Vi,[2,48]),{46:[1,345],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},o($Vi,[2,52]),{8:[1,346]},{46:[1,347],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},o($Vi,[2,50]),{46:[1,348],76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,83:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,90:$VN,95:$VO},o($Vi,[2,55]),{35:349,49:$Vj},o($V41,[2,75]),o($Vi,[2,79]),o($V31,[2,81],{9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,19:16,20:17,21:18,22:21,23:22,24:23,25:24,44:37,6:39,17:$V2,18:$V3,26:$V4,37:$V5,38:$V6,39:$V7,40:$V8,41:$V9,42:$Va,43:$Vb,55:$Vc,59:$Vd,60:$Ve,64:$Vf,65:$Vg,68:$Vh}),o($Vi,[2,58]),{8:[1,350]},{8:[1,351]},{8:[1,352]},o($Vi,[2,53]),{8:[1,353]},{8:[1,354]},o($V41,[2,74]),o($Vi,[2,45]),o($Vi,[2,47]),o($Vi,[2,51]),o($Vi,[2,49]),o($Vi,[2,54])],
defaultActions: {38:[2,1],130:[2,33],131:[2,34],132:[2,35],133:[2,36],134:[2,37],304:[2,90],305:[2,91]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo js
    const Nodo = require('./Nodo');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://comentario unilinea
break;
case 1://comentario multilinea
break;
case 2://EXPACIOS EN BLANCO
break;
case 3:console.log(yy_.yytext);return 37
break;
case 4:return 40;
break;
case 5:return 41;
break;
case 6:return 39;
break;
case 7:return 38;
break;
case 8:return 74;
break;
case 9:return 75;
break;
case 10:return 55;
break;
case 11:return 56;
break;
case 12:return 58;
break;
case 13:return 60;
break;
case 14:return 63;
break;
case 15:return 62;
break;
case 16:return 17;
break;
case 17:return 64;
break;
case 18:return 65;
break;
case 19:return 68;
break;
case 20:return 69;
break;
case 21:return 18;
break;
case 22:return 59;
break;
case 23:return 34;
break;
case 24:return 42;
break;
case 25:return 43;
break;
case 26:return 'RTOLOWER';
break;
case 27:return 'RTOUPPER';
break;
case 28:return 'RROUND';
break;
case 29:return 'RLENGTH';
break;
case 30:return 'RTYPEOF';
break;
case 31:return 'RTOSTRING';
break;
case 32:return 52;
break;
case 33:return 'RPUSH';
break;
case 34:return 'RPOP';
break;
case 35:return 'RRUN';
break;
case 36:return 48;
break;
case 37:return 53;
break;
case 38:return 54;
break;
case 39:return 80;
break;
case 40:return 90;
break;
case 41:return 89;
break;
case 42:return 85;
break;
case 43:return 86;
break;
case 44:return 88;
break;
case 45:return 87;
break;
case 46:return 76;
break;
case 47:return 77;
break;
case 48:return 78;
break;
case 49:return 79;
break;
case 50:return 81;
break;
case 51:console.log(yy_.yytext);return 47;
break;
case 52:return 82;
break;
case 53:return 83;
break;
case 54:return 84;
break;
case 55:return 95;
break;
case 56:return 33;
break;
case 57:return 27;
break;
case 58:return 28;
break;
case 59:console.log(yy_.yytext);return 8;
break;
case 60:return 49;
break;
case 61:return 50;
break;
case 62:return 30;
break;
case 63:return 'PUNTO';
break;
case 64:return 45;
break;
case 65:return 46;
break;
case 66: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 71; 
break;
case 67:console.log(yy_.yytext);return 73;
break;
case 68:console.log(yy_.yytext);return 70;
break;
case 69: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 72; 
break;
case 70:console.log(yy_.yytext);return 26;
break;
case 71:return 5;
break;
case 72:return 7;
break;
}
},
rules: [/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:new\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[\"](((\\')|(\\")|(\\n)|(\\t)|(\\))|[^\\\"\n])*[\"])/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:'(([^\"\'\\\\]{0,1}|\\'|\\"|\\n|\\r|\\t|\\\\))')/i,/^(?:([a-zA-Z_$])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = AST;
exports.Parser = AST.Parser;
exports.parse = function () { return AST.parse.apply(AST, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}