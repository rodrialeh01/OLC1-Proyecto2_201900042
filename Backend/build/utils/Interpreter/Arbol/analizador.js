/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[1,17],$V3=[1,18],$V4=[1,19],$V5=[1,20],$V6=[1,22],$V7=[1,21],$V8=[1,23],$V9=[1,25],$Va=[1,26],$Vb=[1,28],$Vc=[1,29],$Vd=[1,27],$Ve=[1,30],$Vf=[1,31],$Vg=[5,20,24,25,27,28,29,30,32,39,41,45,46,48,50,51,52,55],$Vh=[1,38],$Vi=[1,44],$Vj=[31,40],$Vk=[2,37],$Vl=[1,54],$Vm=[1,64],$Vn=[1,60],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,59],$Vs=[1,61],$Vt=[1,62],$Vu=[1,63],$Vv=[1,65],$Vw=[1,66],$Vx=[1,69],$Vy=[1,70],$Vz=[8,31,40],$VA=[1,98],$VB=[1,99],$VC=[1,100],$VD=[1,101],$VE=[1,102],$VF=[1,103],$VG=[1,104],$VH=[1,105],$VI=[1,106],$VJ=[1,107],$VK=[1,108],$VL=[1,109],$VM=[1,110],$VN=[1,111],$VO=[1,112],$VP=[8,23,34,49,63,64,65,66,67,68,69,70,72,73,74,75,76,77,83],$VQ=[5,20,24,25,27,28,29,30,32,39,41,42,44,45,46,48,50,51,52,55,56],$VR=[8,23,34,49,69,70,83],$VS=[8,23,34,49,63,64,69,70,72,73,74,75,76,77,83],$VT=[8,23,34,49,63,64,65,66,67,69,70,72,73,74,75,76,77,83],$VU=[8,23,34,49,69,70,72,73,74,75,76,77,83],$VV=[39,48,50],$VW=[5,20,24,25,27,28,29,30,32,39,41,42,44,45,46,48,50,51,52,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"AMBITO_GLOBAL":6,"INVALID":7,"PTCOMA":8,"IMPRIMIR":9,"DECLARACION_ASIGNACION":10,"DECLARACION":11,"ASIGNACION":12,"SENTENCIA_IF":13,"CICLO_WHILE":14,"INS_BREAK":15,"SENTENCIA_SWITCH":16,"CICLO_FOR":17,"CICLO_DO_WHILE":18,"CICLO_DO_UNTIL":19,"RPRINT":20,"PARABRE":21,"EXPRESION":22,"PARCIERRA":23,"RPRINTLN":24,"RINT":25,"LISTA_IDENTIFICADORES":26,"RDOUBLE":27,"RCHAR":28,"RSTRING":29,"RBOOLEAN":30,"IGUAL":31,"IDENTIFICADOR":32,"CORABRE":33,"CORCIERRA":34,"INCREMENTO":35,"DECREMENTO":36,"ENCAPSULAMIENTO":37,"LLAVEA":38,"LLAVEC":39,"COMA":40,"RIF":41,"RELSE":42,"LISTA_ELIF":43,"RELIF":44,"RBREAK":45,"RSWITCH":46,"LISTA_CASES":47,"RDEFAULT":48,"DOSPUNTOS":49,"RCASE":50,"RWHILE":51,"RFOR":52,"DECLARACION_ASIG_FOR":53,"ACTUALIZACION_FOR":54,"RDO":55,"RUNTIL":56,"ENTERO":57,"CADENA":58,"CARACTER":59,"DECIMAL":60,"RTRUE":61,"RFALSE":62,"MAS":63,"MENOS":64,"MULTIPLICACION":65,"DIVISION":66,"MODULO":67,"POTENCIA":68,"OR":69,"AND":70,"NOT":71,"IGUALIGUAL":72,"DIFERENTE":73,"MENOR":74,"MAYOR":75,"MENOROIGUAL":76,"MAYOROIGUAL":77,"LLAMADA":78,"OPERADOR_TERNARIO":79,"CASTEOS":80,"ACCESO_VECTORES":81,"FUNCIONES_NATIVAS":82,"INTERROGACION":83,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"INVALID",8:"PTCOMA",20:"RPRINT",21:"PARABRE",23:"PARCIERRA",24:"RPRINTLN",25:"RINT",27:"RDOUBLE",28:"RCHAR",29:"RSTRING",30:"RBOOLEAN",31:"IGUAL",32:"IDENTIFICADOR",33:"CORABRE",34:"CORCIERRA",35:"INCREMENTO",36:"DECREMENTO",38:"LLAVEA",39:"LLAVEC",40:"COMA",41:"RIF",42:"RELSE",44:"RELIF",45:"RBREAK",46:"RSWITCH",48:"RDEFAULT",49:"DOSPUNTOS",50:"RCASE",51:"RWHILE",52:"RFOR",55:"RDO",56:"RUNTIL",57:"ENTERO",58:"CADENA",59:"CARACTER",60:"DECIMAL",61:"RTRUE",62:"RFALSE",63:"MAS",64:"MENOS",65:"MULTIPLICACION",66:"DIVISION",67:"MODULO",68:"POTENCIA",69:"OR",70:"AND",71:"NOT",72:"IGUALIGUAL",73:"DIFERENTE",74:"MENOR",75:"MAYOR",76:"MENOROIGUAL",77:"MAYOROIGUAL",78:"LLAMADA",81:"ACCESO_VECTORES",82:"FUNCIONES_NATIVAS",83:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[9,5],[9,5],[11,3],[11,3],[11,3],[11,3],[11,3],[12,4],[12,7],[12,10],[12,3],[12,3],[10,5],[10,5],[10,5],[10,5],[10,5],[37,3],[37,2],[26,3],[26,1],[13,5],[13,7],[13,6],[13,8],[43,6],[43,5],[15,2],[16,7],[16,10],[16,9],[47,5],[47,4],[14,5],[17,9],[18,7],[19,7],[53,4],[53,3],[54,3],[54,2],[54,2],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,3],[22,3],[22,3],[22,2],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,2],[22,1],[22,1],[22,1],[22,1],[22,1],[79,5],[80,4],[80,4],[80,4],[80,4],[80,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 37:
this.$=[$$[$0]];
break;
case 4:
controller.listaErrores.push(new errores.default('ERROR LEXICO', "No se esperaba el caracter " + $$[$0], _$[$0].first_line, _$[$0].first_column));
break;
case 5:
controller.listaErrores.push(new errores.default('ERROR SINTACTICO', "Se esperaba token", _$[$0-1].first_line, _$[$0-1].first_column));
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 16: case 86: case 87:
this.$=$$[$0];
break;
case 17:
this.$=new impresion.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 18:
this.$=new impresionconsalto.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 19:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.ENTERO, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 20:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.DECIMAL, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 21: case 22:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.CARACTER, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 23:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.BOOLEANO, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 24:
this.$= new Asignacion.default($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 25: case 26: case 85: case 88: case 89:
;
break;
case 27:
this.$ = new increment.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 28:
this.$ = new decrement.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 29:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.ENTERO, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 30:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.DECIMAL, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 31:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.CADENA, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 32:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.CARACTER, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 33:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.BOOLEANO, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 34:
this.$=$$[$0-1];
break;
case 35:
this.$=[];
break;
case 36:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];console.log(this.$)
break;
case 38:
this.$=new insif.default($$[$0-2],$$[$0],null,null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 39:
this.$=new insif.default($$[$0-4],$$[$0-2],null,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 40:
this.$=new insif.default($$[$0-3],$$[$0-1],$$[$0],null,_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 41:
this.$=new insif.default($$[$0-5],$$[$0-3],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 42:
$$[$0-5].push(new elif.default($$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)); this.$=$$[$0-5]
break;
case 43:
this.$=[new elif.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)];
break;
case 44:
this.$=new insbreak.default(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 45:
this.$=new inswitch.default($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 46:
this.$= new inswitch.default($$[$0-7],$$[$0-4],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 47:
this.$= new inswitch.default($$[$0-6],null,$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 48:
$$[$0-4].push(new inscase.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)); this.$=$$[$0-4];
break;
case 49:
this.$=[new inscase.default($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column)];
break;
case 50:
this.$ = new inswhile.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 51:
this.$= new insfor.default($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 52:
this.$= new insdowhile.default($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 53:
this.$= new insdountil.default($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 54:
this.$=new DeclaracionAsignacion.default($$[$0-2],Tipo.DataType.ENTERO, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 55: case 56:
this.$= new Asignacion.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 57: case 83:
this.$ = new increment.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 58: case 84:
this.$ = new decrement.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 59:
this.$ = new nativo.default(Tipo.DataType.ENTERO,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 60:
this.$ = new nativo.default(Tipo.DataType.CADENA,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 61:
this.$ = new nativo.default(Tipo.DataType.CARACTER,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 62:
this.$ = new nativo.default(Tipo.DataType.DECIMAL,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 63:
this.$ = new identificador.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 64: case 65:
this.$ = new nativo.default(Tipo.DataType.BOOLEANO,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 66:
this.$ = new Aritmetica.default(Tipo.tipoOp.SUMA,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 67:
this.$ = new Aritmetica.default(Tipo.tipoOp.RESTA,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 68:
this.$ = new Aritmetica.default(Tipo.tipoOp.MULTIPLICACION,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 69:
this.$ = new Aritmetica.default(Tipo.tipoOp.DIVISION,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 70:
this.$ = new Aritmetica.default(Tipo.tipoOp.MODULO,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 71:
this.$ = new Aritmetica.default(Tipo.tipoOp.POTENCIA,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
this.$ = new Unario.default($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 73:
this.$ = $$[$0-1];
break;
case 74:
this.$ = new Logico.default(Tipo.tipoLog.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 75:
this.$ = new Logico.default(Tipo.tipoLog.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 76:
this.$ = new Not.default($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 77:
this.$ = new Relacional.default(Tipo.tipoRel.IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 78:
this.$ = new Relacional.default(Tipo.tipoRel.DIFERENTE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 79:
this.$ = new Relacional.default(Tipo.tipoRel.MENOR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 80:
this.$ = new Relacional.default(Tipo.tipoRel.MAYOR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 81:
this.$ = new Relacional.default(Tipo.tipoRel.MENOR_IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 82:
this.$ = new Relacional.default(Tipo.tipoRel.MAYOR_IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 90:
this.$ = new opternario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 91:
this.$= new casteo.default(Tipo.DataType.ENTERO,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 92:
this.$= new casteo.default(Tipo.DataType.CADENA,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 93:
this.$= new casteo.default(Tipo.DataType.CARACTER,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 94:
this.$= new casteo.default(Tipo.DataType.BOOLEANO,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 95:
this.$= new casteo.default(Tipo.DataType.DECIMAL,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V2,24:$V3,25:$V4,26:24,27:$V5,28:$V6,29:$V7,30:$V8,32:$V9,41:$Va,45:$Vb,46:$Vc,51:$Vd,52:$Ve,55:$Vf},{1:[3]},{5:[1,32],6:33,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V2,24:$V3,25:$V4,26:24,27:$V5,28:$V6,29:$V7,30:$V8,32:$V9,41:$Va,45:$Vb,46:$Vc,51:$Vd,52:$Ve,55:$Vf},o($Vg,[2,3]),o($Vg,[2,4]),{8:[1,34]},o($Vg,[2,6]),o($Vg,[2,7]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,12]),o($Vg,[2,13]),o($Vg,[2,14]),o($Vg,[2,15]),o($Vg,[2,16]),{21:[1,35]},{21:[1,36]},{26:37,32:$Vh},{26:39,32:$Vh},{26:40,32:$Vh},{26:41,32:$Vh},{26:42,32:$Vh},{31:[1,43],40:$Vi},o($Vj,$Vk,{33:[1,45],35:[1,46],36:[1,47]}),{21:[1,48]},{21:[1,49]},{8:[1,50]},{21:[1,51]},{21:[1,52]},{37:53,38:$Vl},{1:[2,1]},o($Vg,[2,2]),o($Vg,[2,5]),{21:$Vm,22:55,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:71,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{8:[1,73],31:[1,72],40:$Vi},o($Vz,$Vk),{8:[1,75],31:[1,74],40:$Vi},{8:[1,77],31:[1,76],40:$Vi},{8:[1,79],31:[1,78],40:$Vi},{8:[1,81],31:[1,80],40:$Vi},{21:$Vm,22:82,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{32:[1,83]},{21:$Vm,22:84,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{8:[1,85]},{8:[1,86]},{21:$Vm,22:87,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:88,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},o($Vg,[2,44]),{21:$Vm,22:89,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{25:[1,91],32:[1,92],53:90},{51:[1,93],56:[1,94]},{2:$V0,4:95,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V2,24:$V3,25:$V4,26:24,27:$V5,28:$V6,29:$V7,30:$V8,32:$V9,39:[1,96],41:$Va,45:$Vb,46:$Vc,51:$Vd,52:$Ve,55:$Vf},{23:[1,97],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},o($VP,[2,59]),o($VP,[2,60]),o($VP,[2,61]),o($VP,[2,62]),o($VP,[2,63],{35:[1,113],36:[1,114]}),o($VP,[2,64]),o($VP,[2,65]),{21:$Vm,22:115,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:116,25:[1,117],27:[1,121],28:[1,119],29:[1,118],30:[1,120],32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:122,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},o($VP,[2,85]),o($VP,[2,86]),o($VP,[2,87]),o($VP,[2,88]),o($VP,[2,89]),{23:[1,123],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{21:$Vm,22:124,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},o($Vg,[2,19]),{21:$Vm,22:125,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},o($Vg,[2,20]),{21:$Vm,22:126,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},o($Vg,[2,22]),{21:$Vm,22:127,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},o($Vg,[2,21]),{21:$Vm,22:128,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},o($Vg,[2,23]),{8:[1,129],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},o($Vz,[2,36]),{34:[1,130],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},o($Vg,[2,27]),o($Vg,[2,28]),{23:[1,131],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{23:[1,132],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{23:[1,133],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{8:[1,134]},{26:135,32:$Vh},{31:[1,136]},{21:[1,137]},{21:[1,138]},{6:33,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V2,24:$V3,25:$V4,26:24,27:$V5,28:$V6,29:$V7,30:$V8,32:$V9,39:[1,139],41:$Va,45:$Vb,46:$Vc,51:$Vd,52:$Ve,55:$Vf},o($VQ,[2,35]),{8:[1,140]},{21:$Vm,22:141,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:142,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:143,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:144,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:145,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:146,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:147,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:148,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:149,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:150,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:151,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:152,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:153,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:154,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:155,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},o($VP,[2,83]),o($VP,[2,84]),o($VP,[2,72]),{23:[1,156],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{23:[1,157]},{23:[1,158]},{23:[1,159]},{23:[1,160]},{23:[1,161]},o($VR,[2,76],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN}),{8:[1,162]},{8:[1,163],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{8:[1,164],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{8:[1,165],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{8:[1,166],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{8:[1,167],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},o($Vg,[2,24]),{31:[1,168],33:[1,169]},{37:170,38:$Vl},{37:171,38:$Vl},{38:[1,172]},{21:$Vm,22:173,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{31:[1,174],40:$Vi},{21:$Vm,22:175,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:176,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:177,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},o($VQ,[2,34]),o($Vg,[2,17]),o($VS,[2,66],{65:$VC,66:$VD,67:$VE,68:$VF}),o($VS,[2,67],{65:$VC,66:$VD,67:$VE,68:$VF}),o($VT,[2,68],{68:$VF}),o($VT,[2,69],{68:$VF}),o($VT,[2,70],{68:$VF}),o($VP,[2,71]),o([8,23,34,49,69,83],[2,74],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN}),o($VR,[2,75],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN}),o($VU,[2,77],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o($VU,[2,78],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o($VU,[2,79],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o($VU,[2,80],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o($VU,[2,81],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),o($VU,[2,82],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF}),{49:[1,178],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},o($VP,[2,73]),{21:$Vm,22:179,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:180,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:181,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:182,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:183,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},o($Vg,[2,18]),o($Vg,[2,29]),o($Vg,[2,30]),o($Vg,[2,31]),o($Vg,[2,32]),o($Vg,[2,33]),{21:$Vm,22:184,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{21:$Vm,22:185,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},o($Vg,[2,38],{43:187,42:[1,186],44:[1,188]}),o($Vg,[2,50]),{47:189,48:[1,190],50:[1,191]},{8:[1,192],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{21:$Vm,22:193,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{8:[2,55],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{23:[1,194],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{23:[1,195],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{21:$Vm,22:196,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},o($VP,[2,91]),o($VP,[2,92]),o($VP,[2,93]),o($VP,[2,94]),o($VP,[2,95]),{8:[1,197],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{34:[1,198],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{37:199,38:$Vl},o($Vg,[2,40],{42:[1,200],44:[1,201]}),{21:[1,202]},{39:[1,203],48:[1,204],50:[1,205]},{49:[1,206]},{21:$Vm,22:207,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{26:209,32:[1,210],54:208},{8:[2,54],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{8:[1,211]},{8:[1,212]},o([8,23,34,49,83],[2,90],{63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN}),o($Vg,[2,25]),{31:[1,213]},o($Vg,[2,39]),{37:214,38:$Vl},{21:[1,215]},{21:$Vm,22:216,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},o($Vg,[2,45]),{49:[1,217]},{21:$Vm,22:218,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{2:$V0,4:219,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V2,24:$V3,25:$V4,26:24,27:$V5,28:$V6,29:$V7,30:$V8,32:$V9,41:$Va,45:$Vb,46:$Vc,51:$Vd,52:$Ve,55:$Vf},{49:[1,220],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{23:[1,221]},{31:[1,222],40:$Vi},o($Vj,$Vk,{35:[1,223],36:[1,224]}),o($Vg,[2,52]),o($Vg,[2,53]),{21:$Vm,22:225,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},o($Vg,[2,41]),{21:$Vm,22:226,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{23:[1,227],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{2:$V0,4:228,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V2,24:$V3,25:$V4,26:24,27:$V5,28:$V6,29:$V7,30:$V8,32:$V9,41:$Va,45:$Vb,46:$Vc,51:$Vd,52:$Ve,55:$Vf},{49:[1,229],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{6:33,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V2,24:$V3,25:$V4,26:24,27:$V5,28:$V6,29:$V7,30:$V8,32:$V9,39:[1,230],41:$Va,45:$Vb,46:$Vc,51:$Vd,52:$Ve,55:$Vf},{2:$V0,4:231,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V2,24:$V3,25:$V4,26:24,27:$V5,28:$V6,29:$V7,30:$V8,32:$V9,41:$Va,45:$Vb,46:$Vc,51:$Vd,52:$Ve,55:$Vf},{37:232,38:$Vl},{21:$Vm,22:233,32:$Vn,57:$Vo,58:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,64:$Vu,71:$Vv,78:$Vw,79:67,80:68,81:$Vx,82:$Vy},{23:[2,57]},{23:[2,58]},{8:[1,234],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{23:[1,235],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},{37:236,38:$Vl},{6:33,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V2,24:$V3,25:$V4,26:24,27:$V5,28:$V6,29:$V7,30:$V8,32:$V9,39:[1,237],41:$Va,45:$Vb,46:$Vc,51:$Vd,52:$Ve,55:$Vf},{2:$V0,4:238,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,20:$V2,24:$V3,25:$V4,26:24,27:$V5,28:$V6,29:$V7,30:$V8,32:$V9,41:$Va,45:$Vb,46:$Vc,51:$Vd,52:$Ve,55:$Vf},o($Vg,[2,47]),o($VV,[2,49],{9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,26:24,6:33,20:$V2,24:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,32:$V9,41:$Va,45:$Vb,46:$Vc,51:$Vd,52:$Ve,55:$Vf}),o($Vg,[2,51]),{23:[2,56],63:$VA,64:$VB,65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VI,73:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,83:$VO},o($Vg,[2,26]),{37:239,38:$Vl},o($VW,[2,43]),o($Vg,[2,46]),o($VV,[2,48],{9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:16,26:24,6:33,20:$V2,24:$V3,25:$V4,27:$V5,28:$V6,29:$V7,30:$V8,32:$V9,41:$Va,45:$Vb,46:$Vc,51:$Vd,52:$Ve,55:$Vf}),o($VW,[2,42])],
defaultActions: {32:[2,1],223:[2,57],224:[2,58]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo js
    const controller = require('../../../controller/parser/parser')
    const errores = require('./Exceptions/Error')
    const nativo = require('./Expresions/Native');
    const Tipo = require('./Data/Data');
    const impresion = require('./Instructions/imprimir');
    const impresionconsalto = require('./Instructions/ImprimirConSalto');
    const DeclaracionAsignacion = require('./Instructions/DeclaracionAsignacion');
    const Declaracion = require('./Instructions/Declaracion');
    const Asignacion = require('./Instructions/Asignacion');
    const Aritmetica = require('./Expresions/Aritmetica');
    const Unario = require('./Expresions/Unario');
    const Not = require('./Expresions/Not');
    const Relacional = require('./Expresions/Relacional');
    const Logico = require('./Expresions/Logico');
    const insif = require('./Instructions/Sentencia_If');
    const simbolo = require('./Symbol/Symbol');
    const elif = require('./Instructions/Elif');
    const inswhile = require('./Instructions/Ciclo_While');
    const insbreak = require('./Instructions/Break');
    const inswitch = require('./Instructions/Sentencia_Switch');
    const inscase = require('./Instructions/Caso');
    const opternario = require('./Expresions/Operador_Ternario');
    const identificador = require('./Expresions/Identificador');
    const casteo = require('./Expresions/Casteo');
    const increment = require('./Expresions/Incremento');
    const decrement = require('./Expresions/Decremento');
    const insfor = require('./Instructions/Ciclo_For');
    const insdowhile = require('./Instructions/CicloDoWhile');
    const insdountil = require('./Instructions/CicloDoUntil');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://comentario unilinea
break;
case 1://comentario multilinea
break;
case 2://EXPACIOS EN BLANCO
break;
case 3:console.log(yy_.yytext);return 25
break;
case 4:return 27;
break;
case 5:return 30;
break;
case 6:return 28;
break;
case 7:return 29;
break;
case 8:return 61;
break;
case 9:return 62;
break;
case 10:return 41;
break;
case 11:return 42;
break;
case 12:return 44;
break;
case 13:return 46;
break;
case 14:return 50;
break;
case 15:return 48;
break;
case 16:return 45;
break;
case 17:return 51;
break;
case 18:return 52;
break;
case 19:return 55;
break;
case 20:return 56;
break;
case 21:return 'RCONTINUE';
break;
case 22:return 'RRETURN';
break;
case 23:return 'RVOID';
break;
case 24:return 20;
break;
case 25:return 24;
break;
case 26:return 'RTOLOWER';
break;
case 27:return 'RTOUPPER';
break;
case 28:return 'RROUND';
break;
case 29:return 'RLENGTH';
break;
case 30:return 'RTYPEOF';
break;
case 31:return 'RTOSTRING';
break;
case 32:return 'RTOCHARARRAY';
break;
case 33:return 'RPUSH';
break;
case 34:return 'RPOP';
break;
case 35:return 'RRUN';
break;
case 36:return 'RNEW';
break;
case 37:return 35;
break;
case 38:return 36;
break;
case 39:return 67;
break;
case 40:return 77;
break;
case 41:return 76;
break;
case 42:return 72;
break;
case 43:return 73;
break;
case 44:return 75;
break;
case 45:return 74;
break;
case 46:return 63;
break;
case 47:return 64;
break;
case 48:return 65;
break;
case 49:return 66;
break;
case 50:return 68;
break;
case 51:console.log(yy_.yytext);return 31;
break;
case 52:return 69;
break;
case 53:return 70;
break;
case 54:return 71;
break;
case 55:return 83;
break;
case 56:return 49;
break;
case 57:return 21;
break;
case 58:return 23;
break;
case 59:console.log(yy_.yytext);return 8;
break;
case 60:return 38;
break;
case 61:return 39;
break;
case 62:return 40;
break;
case 63:return 'PUNTO';
break;
case 64:return 33;
break;
case 65:return 34;
break;
case 66: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 58; 
break;
case 67:console.log(yy_.yytext);return 60;
break;
case 68:console.log(yy_.yytext);return 57;
break;
case 69: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 59; 
break;
case 70:console.log(yy_.yytext);return 32;
break;
case 71:return 5;
break;
case 72:return 7;
break;
}
},
rules: [/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:new\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[\"](((\\')|(\\")|(\\n)|(\\t)|(\\))|[^\\\"\n])*[\"])/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:'(([^\"\'\\\\]{0,1}|\\'|\\"|\\n|\\r|\\t|\\\\))')/i,/^(?:([a-zA-Z_$])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}