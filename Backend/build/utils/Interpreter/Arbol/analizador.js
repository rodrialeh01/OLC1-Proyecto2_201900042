/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,12],$V2=[1,13],$V3=[1,31],$V4=[1,32],$V5=[1,33],$V6=[1,35],$V7=[1,34],$V8=[1,36],$V9=[1,19],$Va=[1,20],$Vb=[1,25],$Vc=[1,30],$Vd=[1,27],$Ve=[1,26],$Vf=[1,28],$Vg=[1,29],$Vh=[2,5,15,17,22,32,33,34,35,36,38,39,53,54,58,59,61,62,63,64,67],$Vi=[1,50],$Vj=[1,57],$Vk=[1,61],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,58],$Vq=[1,59],$Vr=[1,60],$Vs=[1,62],$Vt=[1,66],$Vu=[1,67],$Vv=[26,45],$Vw=[2,73],$Vx=[1,74],$Vy=[1,84],$Vz=[1,98],$VA=[1,99],$VB=[1,100],$VC=[1,101],$VD=[1,102],$VE=[1,103],$VF=[1,104],$VG=[1,105],$VH=[1,106],$VI=[1,107],$VJ=[1,108],$VK=[1,109],$VL=[1,110],$VM=[1,111],$VN=[1,112],$VO=[16,24,26,29,47,75,76,77,78,79,80,81,82,84,85,86,87,88,89,94],$VP=[1,129],$VQ=[1,132],$VR=[1,130],$VS=[1,131],$VT=[1,133],$VU=[16,26,45],$VV=[2,5,15,17,22,32,33,34,35,36,38,39,53,54,55,57,58,59,61,62,63,64,67,68],$VW=[16,24,26,29,47,81,82,94],$VX=[2,19],$VY=[24,26],$VZ=[16,24,26,29,47,75,76,81,82,84,85,86,87,88,89,94],$V_=[16,24,26,29,47,75,76,77,78,79,81,82,84,85,86,87,88,89,94],$V$=[16,24,26,29,47,81,82,84,85,86,87,88,89,94],$V01=[53,61,62],$V11=[2,5,15,17,22,32,33,34,35,36,38,39,53,54,55,57,58,59,61,62,63,64,67];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"AMBITO_GLOBAL":6,"IMPRIMIR":7,"DECLARACION_VARIABLES":8,"SENTENCIA_IF":9,"CICLO_WHILE":10,"SENTENCIA_SWITCH":11,"CICLO_FOR":12,"CICLO_DO_WHILE":13,"CICLO_DO_UNTIL":14,"RBREAK":15,"PTCOMA":16,"RCONTINUE":17,"INS_RETURN":18,"LLAMADA":19,"METODO":20,"FUNCION":21,"IDENTIFICADOR":22,"PARABRE":23,"PARCIERRA":24,"LISTA_EXPRESIONES":25,"COMA":26,"EXPRESION":27,"LISTA_PARAMETROS":28,"DOSPUNTOS":29,"RVOID":30,"ENCAPSULAMIENTO":31,"RINT":32,"RDOUBLE":33,"RSTRING":34,"RCHAR":35,"RBOOLEAN":36,"TIPO_DATO":37,"RPRINT":38,"RPRINTLN":39,"DECLARACION":40,"ASIGNACION":41,"DECLARACION_ASIGNACION":42,"DECLARACION_VECTOR1":43,"LISTA_IDENTIFICADORES":44,"IGUAL":45,"CORABRE":46,"CORCIERRA":47,"INCREMENTO":48,"DECREMENTO":49,"RNEW":50,"RCORABRE":51,"LLAVEA":52,"LLAVEC":53,"RIF":54,"RELSE":55,"LISTA_ELIF":56,"RELIF":57,"RRETURN":58,"RSWITCH":59,"LISTA_CASES":60,"RDEFAULT":61,"RCASE":62,"RWHILE":63,"RFOR":64,"DECLARACION_ASIG_FOR":65,"ACTUALIZACION_FOR":66,"RDO":67,"RUNTIL":68,"ENTERO":69,"CADENA":70,"CARACTER":71,"DECIMAL":72,"RTRUE":73,"RFALSE":74,"MAS":75,"MENOS":76,"MULTIPLICACION":77,"DIVISION":78,"MODULO":79,"POTENCIA":80,"OR":81,"AND":82,"NOT":83,"IGUALIGUAL":84,"DIFERENTE":85,"MENOR":86,"MAYOR":87,"MENOROIGUAL":88,"MAYOROIGUAL":89,"OPERADOR_TERNARIO":90,"CASTEOS":91,"ACCESO_VECTORES":92,"FUNCIONES_NATIVAS":93,"INTERROGACION":94,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"RBREAK",16:"PTCOMA",17:"RCONTINUE",22:"IDENTIFICADOR",23:"PARABRE",24:"PARCIERRA",26:"COMA",29:"DOSPUNTOS",30:"RVOID",32:"RINT",33:"RDOUBLE",34:"RSTRING",35:"RCHAR",36:"RBOOLEAN",38:"RPRINT",39:"RPRINTLN",45:"IGUAL",46:"CORABRE",47:"CORCIERRA",48:"INCREMENTO",49:"DECREMENTO",50:"RNEW",51:"RCORABRE",52:"LLAVEA",53:"LLAVEC",54:"RIF",55:"RELSE",57:"RELIF",58:"RRETURN",59:"RSWITCH",61:"RDEFAULT",62:"RCASE",63:"RWHILE",64:"RFOR",67:"RDO",68:"RUNTIL",69:"ENTERO",70:"CADENA",71:"CARACTER",72:"DECIMAL",73:"RTRUE",74:"RFALSE",75:"MAS",76:"MENOS",77:"MULTIPLICACION",78:"DIVISION",79:"MODULO",80:"POTENCIA",81:"OR",82:"AND",83:"NOT",84:"IGUALIGUAL",85:"DIFERENTE",86:"MENOR",87:"MAYOR",88:"MENOROIGUAL",89:"MAYOROIGUAL",92:"ACCESO_VECTORES",93:"FUNCIONES_NATIVAS",94:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[6,1],[19,3],[19,4],[25,3],[25,1],[20,7],[20,5],[20,6],[20,4],[21,7],[21,7],[21,7],[21,7],[21,7],[21,6],[21,6],[21,6],[21,6],[21,6],[28,4],[28,2],[37,1],[37,1],[37,1],[37,1],[37,1],[7,5],[7,5],[8,1],[8,1],[8,1],[8,1],[40,3],[40,3],[40,3],[40,3],[40,3],[41,4],[41,7],[41,10],[41,3],[41,3],[42,5],[42,5],[42,5],[42,5],[42,5],[43,11],[43,11],[43,11],[43,11],[43,11],[31,3],[31,2],[44,3],[44,1],[9,5],[9,7],[9,6],[9,8],[56,6],[56,5],[18,2],[18,3],[11,7],[11,10],[11,9],[60,5],[60,4],[10,5],[12,9],[13,7],[14,7],[65,4],[65,3],[66,3],[66,2],[66,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,3],[27,2],[27,3],[27,3],[27,3],[27,3],[27,3],[27,3],[27,2],[27,2],[27,1],[27,1],[27,1],[27,1],[27,1],[90,5],[91,4],[91,4],[91,4],[91,4],[91,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 22: case 73:
this.$=[$$[$0]];
break;
case 4: case 5: case 6: case 7: case 8: case 9: case 10: case 11: case 14: case 16: case 17: case 46: case 47: case 48: case 49: case 122: case 123: case 124:
this.$=$$[$0];
break;
case 12:
this.$=new insbreak.default(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 13:
this.$=new inscontinue.default(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 15: case 70:
this.$=$$[$0-1];
break;
case 18:
controller.listaErrores.push(new Errores.default(Tipo.tipoErr.SINTACTICO, "Se esperaba token " + $$[$0], _$[$0].first_line, _$[$0].first_column));
break;
case 19:
this.$= new llamada.default($$[$0-2],null,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 20:
this.$= new llamada.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 21: case 72:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 23:
this.$ = new funcion.default($$[$0-6],$$[$0-4],Tipo.DataType.VOID,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 24:
this.$ = new funcion.default($$[$0-4],$$[$0-2],Tipo.DataType.VOID,$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 25:
this.$ = new funcion.default($$[$0-5],null,Tipo.DataType.VOID,$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 26:
this.$ = new funcion.default($$[$0-3],null,Tipo.DataType.VOID,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 27:
this.$ = new funcion.default($$[$0-6],$$[$0-4],Tipo.DataType.ENTERO,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 28:
this.$ = new funcion.default($$[$0-6],$$[$0-4],Tipo.DataType.DECIMAL,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 29:
this.$ = new funcion.default($$[$0-6],$$[$0-4],Tipo.DataType.CADENA,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 30:
this.$ = new funcion.default($$[$0-6],$$[$0-4],Tipo.DataType.CARACTER,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 31:
this.$ = new funcion.default($$[$0-6],$$[$0-4],Tipo.DataType.BOOLEANO,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 32: case 33: case 34: case 35: case 36:
this.$ = new funcion.default($$[$0-5],null,Tipo.DataType.ENTERO,$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 37:
$$[$0-3].push($$[$0] + "," + $$[$0-1]); this.$ = $$[$0-3]
break;
case 38:
this.$= [$$[$0] + "," + $$[$0-1]];
break;
case 39:
this.$=Tipo.DataType.ENTERO;
break;
case 40:
this.$=Tipo.DataType.CADENA;
break;
case 41:
this.$=Tipo.DataType.CARACTER;
break;
case 42:
this.$=Tipo.DataType.DECIMAL;
break;
case 43:
this.$=Tipo.DataType.BOOLEANO;
break;
case 44:
this.$=new impresion.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 45:
this.$=new impresionconsalto.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 50:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.ENTERO, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 51:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.DECIMAL, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 52: case 53:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.CARACTER, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 54:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.BOOLEANO, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 55:
this.$= new Asignacion.default($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 56: case 57: case 125: case 126:
;
break;
case 58:
this.$ = new increment.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 59:
this.$ = new decrement.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 60:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.ENTERO, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 61:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.DECIMAL, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 62:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.CADENA, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 63:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.CARACTER, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 64:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.BOOLEANO, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 65:
this.$=new decv1f1.default($$[$0-7],Tipo.DataType.ENTERO,$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 66:
this.$=new decv1f1.default($$[$0-7],Tipo.DataType.DECIMAL,$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 67:
this.$=new decv1f1.default($$[$0-7],Tipo.DataType.CADENA,$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 68:
this.$=new decv1f1.default($$[$0-7],Tipo.DataType.CARACTER,$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 69:
this.$=new decv1f1.default($$[$0-7],Tipo.DataType.BOOLEANO,$$[$0-2],_$[$0-10].first_line,_$[$0-10].first_column);
break;
case 71:
this.$=[];
break;
case 74:
this.$=new insif.default($$[$0-2],$$[$0],null,null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 75:
this.$=new insif.default($$[$0-4],$$[$0-2],null,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 76:
this.$=new insif.default($$[$0-3],$$[$0-1],$$[$0],null,_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 77:
this.$=new insif.default($$[$0-5],$$[$0-3],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 78:
$$[$0-5].push(new elif.default($$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)); this.$=$$[$0-5]
break;
case 79:
this.$=[new elif.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)];
break;
case 80:
this.$=new insreturn.default(null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 81:
this.$=new insreturn.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 82:
this.$=new inswitch.default($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 83:
this.$= new inswitch.default($$[$0-7],$$[$0-4],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 84:
this.$= new inswitch.default($$[$0-6],null,$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 85:
$$[$0-4].push(new inscase.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)); this.$=$$[$0-4];
break;
case 86:
this.$=[new inscase.default($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column)];
break;
case 87:
this.$ = new inswhile.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 88:
this.$= new insfor.default($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 89:
this.$= new insdowhile.default($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 90:
this.$= new insdountil.default($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 91:
this.$=new DeclaracionAsignacion.default($$[$0-2],Tipo.DataType.ENTERO, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 92: case 93:
this.$= new Asignacion.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 94: case 120:
this.$ = new increment.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 95: case 121:
this.$ = new decrement.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 96:
this.$ = new nativo.default(Tipo.DataType.ENTERO,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 97:
this.$ = new nativo.default(Tipo.DataType.CADENA,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 98:
this.$ = new nativo.default(Tipo.DataType.CARACTER,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 99:
this.$ = new nativo.default(Tipo.DataType.DECIMAL,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 100:
this.$ = new identificador.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 101: case 102:
this.$ = new nativo.default(Tipo.DataType.BOOLEANO,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 103:
this.$ = new Aritmetica.default(Tipo.tipoOp.SUMA,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 104:
this.$ = new Aritmetica.default(Tipo.tipoOp.RESTA,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 105:
this.$ = new Aritmetica.default(Tipo.tipoOp.MULTIPLICACION,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 106:
this.$ = new Aritmetica.default(Tipo.tipoOp.DIVISION,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 107:
this.$ = new Aritmetica.default(Tipo.tipoOp.MODULO,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 108:
this.$ = new Aritmetica.default(Tipo.tipoOp.POTENCIA,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 109:
this.$ = new Unario.default($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 110:
this.$ = $$[$0-1];
break;
case 111:
this.$ = new Logico.default(Tipo.tipoLog.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 112:
this.$ = new Logico.default(Tipo.tipoLog.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 113:
this.$ = new Not.default($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 114:
this.$ = new Relacional.default(Tipo.tipoRel.IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 115:
this.$ = new Relacional.default(Tipo.tipoRel.DIFERENTE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 116:
this.$ = new Relacional.default(Tipo.tipoRel.MENOR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 117:
this.$ = new Relacional.default(Tipo.tipoRel.MAYOR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 118:
this.$ = new Relacional.default(Tipo.tipoRel.MENOR_IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 119:
this.$ = new Relacional.default(Tipo.tipoRel.MAYOR_IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 127:
this.$ = new opternario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 128:
this.$= new casteo.default(Tipo.DataType.ENTERO,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 129:
this.$= new casteo.default(Tipo.DataType.CADENA,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 130:
this.$= new casteo.default(Tipo.DataType.CARACTER,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 131:
this.$= new casteo.default(Tipo.DataType.BOOLEANO,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 132:
this.$= new casteo.default(Tipo.DataType.DECIMAL,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,17:$V2,18:14,19:15,20:16,21:17,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:$V9,39:$Va,40:21,41:22,42:23,43:24,44:37,54:$Vb,58:$Vc,59:$Vd,63:$Ve,64:$Vf,67:$Vg},{1:[3]},{2:$V0,5:[1,38],6:39,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,17:$V2,18:14,19:15,20:16,21:17,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:$V9,39:$Va,40:21,41:22,42:23,43:24,44:37,54:$Vb,58:$Vc,59:$Vd,63:$Ve,64:$Vf,67:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),o($Vh,[2,10]),o($Vh,[2,11]),{16:[1,40]},{16:[1,41]},o($Vh,[2,14]),{16:[1,42]},o($Vh,[2,16]),o($Vh,[2,17]),o($Vh,[2,18]),{23:[1,43]},{23:[1,44]},o($Vh,[2,46]),o($Vh,[2,47]),o($Vh,[2,48]),o($Vh,[2,49]),{23:[1,45]},{23:[1,46]},{23:[1,47]},{23:[1,48]},{31:49,52:$Vi},{16:[1,51],19:63,22:$Vj,23:$Vk,27:52,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},o($Vv,$Vw,{23:[1,68],46:[1,69],48:[1,70],49:[1,71]}),{22:$Vx,44:72,46:[1,73]},{22:$Vx,44:75,46:[1,76]},{22:$Vx,44:77,46:[1,78]},{22:$Vx,44:79,46:[1,80]},{22:$Vx,44:81,46:[1,82]},{26:$Vy,45:[1,83]},{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,12]),o($Vh,[2,13]),o($Vh,[2,15]),{19:63,22:$Vj,23:$Vk,27:85,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:86,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:87,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:88,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:89,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{22:[1,92],32:[1,91],65:90},{63:[1,93],68:[1,94]},{2:$V0,4:95,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,17:$V2,18:14,19:15,20:16,21:17,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:$V9,39:$Va,40:21,41:22,42:23,43:24,44:37,53:[1,96],54:$Vb,58:$Vc,59:$Vd,63:$Ve,64:$Vf,67:$Vg},o($Vh,[2,80]),{16:[1,97],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},o($VO,[2,96]),o($VO,[2,97]),o($VO,[2,98]),o($VO,[2,99]),o($VO,[2,100],{23:[1,115],48:[1,113],49:[1,114]}),o($VO,[2,101]),o($VO,[2,102]),{19:63,22:$Vj,23:$Vk,27:116,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:117,32:[1,118],33:[1,122],34:[1,119],35:[1,120],36:[1,121],69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:123,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},o($VO,[2,122]),o($VO,[2,123]),o($VO,[2,124]),o($VO,[2,125]),o($VO,[2,126]),{19:63,22:$Vj,23:$Vk,24:[1,124],25:125,27:127,28:126,32:$VP,33:$VQ,34:$VR,35:$VS,36:$VT,37:128,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:134,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{16:[1,135]},{16:[1,136]},{16:[1,137],26:$Vy,45:[1,138]},{47:[1,139]},o($VU,$Vw),{16:[1,140],26:$Vy,45:[1,141]},{47:[1,142]},{16:[1,143],26:$Vy,45:[1,144]},{47:[1,145]},{16:[1,146],26:$Vy,45:[1,147]},{47:[1,148]},{16:[1,149],26:$Vy,45:[1,150]},{47:[1,151]},{19:63,22:$Vj,23:$Vk,27:152,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{22:[1,153]},{24:[1,154],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{24:[1,155],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{24:[1,156],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{24:[1,157],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{24:[1,158],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{16:[1,159]},{22:$Vx,44:160},{45:[1,161]},{23:[1,162]},{23:[1,163]},{2:$V0,6:39,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,17:$V2,18:14,19:15,20:16,21:17,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:$V9,39:$Va,40:21,41:22,42:23,43:24,44:37,53:[1,164],54:$Vb,58:$Vc,59:$Vd,63:$Ve,64:$Vf,67:$Vg},o($VV,[2,71]),o($Vh,[2,81]),{19:63,22:$Vj,23:$Vk,27:165,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:166,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:167,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:168,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:169,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:170,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:171,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:172,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:173,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:174,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:175,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:176,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:177,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:178,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:179,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},o($VO,[2,120]),o($VO,[2,121]),{19:63,22:$Vj,23:$Vk,24:[1,180],25:125,27:127,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},o($VO,[2,109]),{24:[1,181],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{24:[1,182]},{24:[1,183]},{24:[1,184]},{24:[1,185]},{24:[1,186]},o($VW,[2,113],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),{16:$VX,29:[1,187],31:188,52:$Vi},{24:[1,189],26:[1,190]},{24:[1,191],26:[1,192]},o($VY,[2,22],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN}),{22:[1,193]},{22:[2,39]},{22:[2,40]},{22:[2,41]},{22:[2,42]},{22:[2,43]},{47:[1,194],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},o($Vh,[2,58]),o($Vh,[2,59]),o($Vh,[2,50]),{19:63,22:$Vj,23:$Vk,27:195,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{22:[1,196]},o($Vh,[2,51]),{19:63,22:$Vj,23:$Vk,27:197,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{22:[1,198]},o($Vh,[2,52]),{19:63,22:$Vj,23:$Vk,27:199,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{22:[1,200]},o($Vh,[2,53]),{19:63,22:$Vj,23:$Vk,27:201,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{22:[1,202]},o($Vh,[2,54]),{19:63,22:$Vj,23:$Vk,27:203,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{22:[1,204]},{16:[1,205],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},o($VU,[2,72]),{16:[1,206]},{16:[1,207]},{31:208,52:$Vi},{31:209,52:$Vi},{52:[1,210]},{19:63,22:$Vj,23:$Vk,27:211,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{26:$Vy,45:[1,212]},{19:63,22:$Vj,23:$Vk,27:213,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:214,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:215,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},o($VV,[2,70]),o($VZ,[2,103],{77:$VB,78:$VC,79:$VD,80:$VE}),o($VZ,[2,104],{77:$VB,78:$VC,79:$VD,80:$VE}),o($V_,[2,105],{80:$VE}),o($V_,[2,106],{80:$VE}),o($V_,[2,107],{80:$VE}),o($VO,[2,108]),o([16,24,26,29,47,81,94],[2,111],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($VW,[2,112],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($V$,[2,114],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE}),o($V$,[2,115],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE}),o($V$,[2,116],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE}),o($V$,[2,117],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE}),o($V$,[2,118],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE}),o($V$,[2,119],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE}),{29:[1,216],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},o($VO,$VX),o($VO,[2,110]),{19:63,22:$Vj,23:$Vk,27:217,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:218,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:219,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:220,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:221,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{30:[1,222],32:[1,223],33:[1,226],34:[1,224],35:[1,225],36:[1,227]},o($Vh,[2,26]),o($VO,[2,20]),{19:63,22:$Vj,23:$Vk,27:228,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{29:[1,229],31:230,52:$Vi},{32:$VP,33:$VQ,34:$VR,35:$VS,36:$VT,37:231},o($VY,[2,38]),{45:[1,232],46:[1,233]},{16:[1,234],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{45:[1,235]},{16:[1,236],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{45:[1,237]},{16:[1,238],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{45:[1,239]},{16:[1,240],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{45:[1,241]},{16:[1,242],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{45:[1,243]},o($Vh,[2,55]),o($Vh,[2,44]),o($Vh,[2,45]),o($Vh,[2,74],{56:245,55:[1,244],57:[1,246]}),o($Vh,[2,87]),{60:247,61:[1,248],62:[1,249]},{16:[1,250],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{19:63,22:$Vj,23:$Vk,27:251,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{16:[2,92],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{24:[1,252],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{24:[1,253],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{19:63,22:$Vj,23:$Vk,27:254,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},o($VO,[2,128]),o($VO,[2,129]),o($VO,[2,130]),o($VO,[2,131]),o($VO,[2,132]),{31:255,52:$Vi},{31:256,52:$Vi},{31:257,52:$Vi},{31:258,52:$Vi},{31:259,52:$Vi},{31:260,52:$Vi},o($VY,[2,21],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN}),{30:[1,261],32:[1,262],33:[1,263],34:[1,264],35:[1,265],36:[1,266]},o($Vh,[2,24]),{22:[1,267]},{19:63,22:$Vj,23:$Vk,27:268,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:269,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},o($Vh,[2,60]),{50:[1,270]},o($Vh,[2,61]),{50:[1,271]},o($Vh,[2,63]),{50:[1,272]},o($Vh,[2,62]),{50:[1,273]},o($Vh,[2,64]),{50:[1,274]},{31:275,52:$Vi},o($Vh,[2,76],{55:[1,276],57:[1,277]}),{23:[1,278]},{53:[1,279],61:[1,280],62:[1,281]},{29:[1,282]},{19:63,22:$Vj,23:$Vk,27:283,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{22:[1,286],44:285,66:284},{16:[2,91],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{16:[1,287]},{16:[1,288]},o([16,24,26,29,47,94],[2,127],{75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM}),o($Vh,[2,25]),o($Vh,[2,32]),o($Vh,[2,33]),o($Vh,[2,34]),o($Vh,[2,35]),o($Vh,[2,36]),{31:289,52:$Vi},{31:290,52:$Vi},{31:291,52:$Vi},{31:292,52:$Vi},{31:293,52:$Vi},{31:294,52:$Vi},o($VY,[2,37]),{16:[1,295],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{47:[1,296],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{32:[1,297]},{33:[1,298]},{35:[1,299]},{34:[1,300]},{36:[1,301]},o($Vh,[2,75]),{31:302,52:$Vi},{23:[1,303]},{19:63,22:$Vj,23:$Vk,27:304,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},o($Vh,[2,82]),{29:[1,305]},{19:63,22:$Vj,23:$Vk,27:306,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{2:$V0,4:307,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,17:$V2,18:14,19:15,20:16,21:17,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:$V9,39:$Va,40:21,41:22,42:23,43:24,44:37,54:$Vb,58:$Vc,59:$Vd,63:$Ve,64:$Vf,67:$Vg},{29:[1,308],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{24:[1,309]},{26:$Vy,45:[1,310]},o($Vv,$Vw,{48:[1,311],49:[1,312]}),o($Vh,[2,89]),o($Vh,[2,90]),o($Vh,[2,23]),o($Vh,[2,27]),o($Vh,[2,28]),o($Vh,[2,29]),o($Vh,[2,30]),o($Vh,[2,31]),o($Vh,[2,56]),{45:[1,313]},{46:[1,314]},{51:[1,315]},{51:[1,316]},{51:[1,317]},{51:[1,318]},o($Vh,[2,77]),{19:63,22:$Vj,23:$Vk,27:319,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{24:[1,320],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{2:$V0,4:321,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,17:$V2,18:14,19:15,20:16,21:17,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:$V9,39:$Va,40:21,41:22,42:23,43:24,44:37,54:$Vb,58:$Vc,59:$Vd,63:$Ve,64:$Vf,67:$Vg},{29:[1,322],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{2:$V0,6:39,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,17:$V2,18:14,19:15,20:16,21:17,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:$V9,39:$Va,40:21,41:22,42:23,43:24,44:37,53:[1,323],54:$Vb,58:$Vc,59:$Vd,63:$Ve,64:$Vf,67:$Vg},{2:$V0,4:324,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,17:$V2,18:14,19:15,20:16,21:17,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:$V9,39:$Va,40:21,41:22,42:23,43:24,44:37,54:$Vb,58:$Vc,59:$Vd,63:$Ve,64:$Vf,67:$Vg},{31:325,52:$Vi},{19:63,22:$Vj,23:$Vk,27:326,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{24:[2,94]},{24:[2,95]},{19:63,22:$Vj,23:$Vk,27:327,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:328,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:329,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:330,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:331,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{19:63,22:$Vj,23:$Vk,27:332,69:$Vl,70:$Vm,71:$Vn,72:$Vo,73:$Vp,74:$Vq,76:$Vr,83:$Vs,90:64,91:65,92:$Vt,93:$Vu},{24:[1,333],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{31:334,52:$Vi},{2:$V0,6:39,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,17:$V2,18:14,19:15,20:16,21:17,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:$V9,39:$Va,40:21,41:22,42:23,43:24,44:37,53:[1,335],54:$Vb,58:$Vc,59:$Vd,63:$Ve,64:$Vf,67:$Vg},{2:$V0,4:336,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,15:$V1,17:$V2,18:14,19:15,20:16,21:17,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:$V9,39:$Va,40:21,41:22,42:23,43:24,44:37,54:$Vb,58:$Vc,59:$Vd,63:$Ve,64:$Vf,67:$Vg},o($Vh,[2,84]),o($V01,[2,86],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,18:14,19:15,20:16,21:17,40:21,41:22,42:23,43:24,44:37,6:39,2:$V0,15:$V1,17:$V2,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:$V9,39:$Va,54:$Vb,58:$Vc,59:$Vd,63:$Ve,64:$Vf,67:$Vg}),o($Vh,[2,88]),{24:[2,93],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{16:[1,337],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{47:[1,338],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{47:[1,339],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{47:[1,340],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{47:[1,341],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{47:[1,342],75:$Vz,76:$VA,77:$VB,78:$VC,79:$VD,80:$VE,81:$VF,82:$VG,84:$VH,85:$VI,86:$VJ,87:$VK,88:$VL,89:$VM,94:$VN},{31:343,52:$Vi},o($V11,[2,79]),o($Vh,[2,83]),o($V01,[2,85],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:11,18:14,19:15,20:16,21:17,40:21,41:22,42:23,43:24,44:37,6:39,2:$V0,15:$V1,17:$V2,22:$V3,32:$V4,33:$V5,34:$V6,35:$V7,36:$V8,38:$V9,39:$Va,54:$Vb,58:$Vc,59:$Vd,63:$Ve,64:$Vf,67:$Vg}),o($Vh,[2,57]),{16:[1,344]},{16:[1,345]},{16:[1,346]},{16:[1,347]},{16:[1,348]},o($V11,[2,78]),o($Vh,[2,65]),o($Vh,[2,66]),o($Vh,[2,68]),o($Vh,[2,67]),o($Vh,[2,69])],
defaultActions: {38:[2,1],129:[2,39],130:[2,40],131:[2,41],132:[2,42],133:[2,43],311:[2,94],312:[2,95]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo js
    const controller = require('../../../controller/parser/parser');
    const Errores = require('./Exceptions/Error');
    const nativo = require('./Expresions/Native');
    const Tipo = require('./Data/Data');
    const impresion = require('./Instructions/imprimir');
    const impresionconsalto = require('./Instructions/ImprimirConSalto');
    const DeclaracionAsignacion = require('./Instructions/DeclaracionAsignacion');
    const Declaracion = require('./Instructions/Declaracion');
    const Asignacion = require('./Instructions/Asignacion');
    const Aritmetica = require('./Expresions/Aritmetica');
    const Unario = require('./Expresions/Unario');
    const Not = require('./Expresions/Not');
    const Relacional = require('./Expresions/Relacional');
    const Logico = require('./Expresions/Logico');
    const insif = require('./Instructions/Sentencia_If');
    const simbolo = require('./Symbol/Symbol');
    const elif = require('./Instructions/Elif');
    const inswhile = require('./Instructions/Ciclo_While');
    const insbreak = require('./Instructions/Break');
    const inswitch = require('./Instructions/Sentencia_Switch');
    const inscase = require('./Instructions/Caso');
    const opternario = require('./Expresions/Operador_Ternario');
    const identificador = require('./Expresions/Identificador');
    const casteo = require('./Expresions/Casteo');
    const increment = require('./Expresions/Incremento');
    const decrement = require('./Expresions/Decremento');
    const insfor = require('./Instructions/Ciclo_For');
    const insdowhile = require('./Instructions/CicloDoWhile');
    const insdountil = require('./Instructions/CicloDoUntil');
    const insreturn = require('./Instructions/Return');
    const inscontinue = require('./Instructions/Continue');
    const funcion = require('./Instructions/Funcion');
    const llamada = require('./Instructions/LlamadaFuncion');
    const decv1f1 = require('./Instructions/DeclaracionVector1D1');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://comentario unilinea
break;
case 1://comentario multilinea
break;
case 2://EXPACIOS EN BLANCO
break;
case 3:return 32;
break;
case 4:return 33;
break;
case 5:return 36;
break;
case 6:return 35;
break;
case 7:return 34;
break;
case 8:return 73;
break;
case 9:return 74;
break;
case 10:return 54;
break;
case 11:return 55;
break;
case 12:return 57;
break;
case 13:return 59;
break;
case 14:return 62;
break;
case 15:return 61;
break;
case 16:return 15;
break;
case 17:return 63;
break;
case 18:return 64;
break;
case 19:return 67;
break;
case 20:return 68;
break;
case 21:return 17;
break;
case 22:return 58;
break;
case 23:return 30;
break;
case 24:return 38;
break;
case 25:return 39;
break;
case 26:return 'RTOLOWER';
break;
case 27:return 'RTOUPPER';
break;
case 28:return 'RROUND';
break;
case 29:return 'RLENGTH';
break;
case 30:return 'RTYPEOF';
break;
case 31:return 'RTOSTRING';
break;
case 32:return 'RTOCHARARRAY';
break;
case 33:return 'RPUSH';
break;
case 34:return 'RPOP';
break;
case 35:return 'RRUN';
break;
case 36:return 50;
break;
case 37:return 48;
break;
case 38:return 49;
break;
case 39:return 79;
break;
case 40:return 89;
break;
case 41:return 88;
break;
case 42:return 84;
break;
case 43:return 85;
break;
case 44:return 87;
break;
case 45:return 86;
break;
case 46:return 75;
break;
case 47:return 76;
break;
case 48:return 77;
break;
case 49:return 78;
break;
case 50:return 80;
break;
case 51:console.log(yy_.yytext);return 45;
break;
case 52:return 81;
break;
case 53:return 82;
break;
case 54:return 83;
break;
case 55:return 94;
break;
case 56:return 29;
break;
case 57:return 23;
break;
case 58:return 24;
break;
case 59:console.log(yy_.yytext);return 16;
break;
case 60:return 52;
break;
case 61:return 53;
break;
case 62:return 26;
break;
case 63:return 'PUNTO';
break;
case 64:return 46;
break;
case 65:return 47;
break;
case 66: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 70; 
break;
case 67:console.log(yy_.yytext);return 72;
break;
case 68:console.log(yy_.yytext);return 69;
break;
case 69: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 71; 
break;
case 70:console.log(yy_.yytext);return 22;
break;
case 71:return 5;
break;
case 72:controller.listaErrores.push(new Errores.default(Tipo.tipoErr.LEXICO, "No se esperaba el caracter " + yy_.yytext, yy_.yylloc.first_line, yy_.yylloc.first_column));
break;
}
},
rules: [/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:new\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[\"](((\\')|(\\")|(\\n)|(\\t)|(\\))|[^\\\"\n])*[\"])/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:'(([^\"\'\\\\]{0,1}|\\'|\\"|\\n|\\r|\\t|\\\\))')/i,/^(?:([a-zA-Z_$])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}