/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[1,16],$V3=[1,17],$V4=[1,30],$V5=[1,24],$V6=[1,25],$V7=[1,26],$V8=[1,27],$V9=[1,28],$Va=[1,22],$Vb=[1,23],$Vc=[1,31],$Vd=[1,36],$Ve=[1,33],$Vf=[1,32],$Vg=[1,34],$Vh=[1,35],$Vi=[5,19,20,25,35,36,37,38,39,41,42,50,51,55,56,58,59,60,61,64],$Vj=[1,46],$Vk=[1,52],$Vl=[29,44],$Vm=[2,67],$Vn=[1,62],$Vo=[1,69],$Vp=[1,73],$Vq=[1,65],$Vr=[1,66],$Vs=[1,67],$Vt=[1,68],$Vu=[1,70],$Vv=[1,71],$Vw=[1,72],$Vx=[1,74],$Vy=[1,78],$Vz=[1,79],$VA=[8,29,44],$VB=[1,102],$VC=[1,105],$VD=[1,103],$VE=[1,104],$VF=[1,106],$VG=[1,118],$VH=[1,119],$VI=[1,120],$VJ=[1,121],$VK=[1,122],$VL=[1,123],$VM=[1,124],$VN=[1,125],$VO=[1,126],$VP=[1,127],$VQ=[1,128],$VR=[1,129],$VS=[1,130],$VT=[1,131],$VU=[1,132],$VV=[8,27,29,32,46,72,73,74,75,76,77,78,79,81,82,83,84,85,86,91],$VW=[2,22],$VX=[27,29],$VY=[5,19,20,25,35,36,37,38,39,41,42,50,51,52,54,55,56,58,59,60,61,64,65],$VZ=[8,27,29,32,46,78,79,91],$V_=[8,27,29,32,46,72,73,78,79,81,82,83,84,85,86,91],$V$=[8,27,29,32,46,72,73,74,75,76,78,79,81,82,83,84,85,86,91],$V01=[8,27,29,32,46,78,79,81,82,83,84,85,86,91],$V11=[50,58,59],$V21=[5,19,20,25,35,36,37,38,39,41,42,50,51,52,54,55,56,58,59,60,61,64];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"AMBITO_GLOBAL":6,"INVALID":7,"PTCOMA":8,"IMPRIMIR":9,"DECLARACION_ASIGNACION":10,"DECLARACION":11,"ASIGNACION":12,"SENTENCIA_IF":13,"CICLO_WHILE":14,"SENTENCIA_SWITCH":15,"CICLO_FOR":16,"CICLO_DO_WHILE":17,"CICLO_DO_UNTIL":18,"RBREAK":19,"RCONTINUE":20,"INS_RETURN":21,"LLAMADA":22,"METODO":23,"FUNCION":24,"IDENTIFICADOR":25,"PARABRE":26,"PARCIERRA":27,"LISTA_EXPRESIONES":28,"COMA":29,"EXPRESION":30,"LISTA_PARAMETROS":31,"DOSPUNTOS":32,"RVOID":33,"ENCAPSULAMIENTO":34,"RINT":35,"RDOUBLE":36,"RSTRING":37,"RCHAR":38,"RBOOLEAN":39,"TIPO_DATO":40,"RPRINT":41,"RPRINTLN":42,"LISTA_IDENTIFICADORES":43,"IGUAL":44,"CORABRE":45,"CORCIERRA":46,"INCREMENTO":47,"DECREMENTO":48,"LLAVEA":49,"LLAVEC":50,"RIF":51,"RELSE":52,"LISTA_ELIF":53,"RELIF":54,"RRETURN":55,"RSWITCH":56,"LISTA_CASES":57,"RDEFAULT":58,"RCASE":59,"RWHILE":60,"RFOR":61,"DECLARACION_ASIG_FOR":62,"ACTUALIZACION_FOR":63,"RDO":64,"RUNTIL":65,"ENTERO":66,"CADENA":67,"CARACTER":68,"DECIMAL":69,"RTRUE":70,"RFALSE":71,"MAS":72,"MENOS":73,"MULTIPLICACION":74,"DIVISION":75,"MODULO":76,"POTENCIA":77,"OR":78,"AND":79,"NOT":80,"IGUALIGUAL":81,"DIFERENTE":82,"MENOR":83,"MAYOR":84,"MENOROIGUAL":85,"MAYOROIGUAL":86,"OPERADOR_TERNARIO":87,"CASTEOS":88,"ACCESO_VECTORES":89,"FUNCIONES_NATIVAS":90,"INTERROGACION":91,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"INVALID",8:"PTCOMA",19:"RBREAK",20:"RCONTINUE",25:"IDENTIFICADOR",26:"PARABRE",27:"PARCIERRA",29:"COMA",32:"DOSPUNTOS",33:"RVOID",35:"RINT",36:"RDOUBLE",37:"RSTRING",38:"RCHAR",39:"RBOOLEAN",41:"RPRINT",42:"RPRINTLN",44:"IGUAL",45:"CORABRE",46:"CORCIERRA",47:"INCREMENTO",48:"DECREMENTO",49:"LLAVEA",50:"LLAVEC",51:"RIF",52:"RELSE",54:"RELIF",55:"RRETURN",56:"RSWITCH",58:"RDEFAULT",59:"RCASE",60:"RWHILE",61:"RFOR",64:"RDO",65:"RUNTIL",66:"ENTERO",67:"CADENA",68:"CARACTER",69:"DECIMAL",70:"RTRUE",71:"RFALSE",72:"MAS",73:"MENOS",74:"MULTIPLICACION",75:"DIVISION",76:"MODULO",77:"POTENCIA",78:"OR",79:"AND",80:"NOT",81:"IGUALIGUAL",82:"DIFERENTE",83:"MENOR",84:"MAYOR",85:"MENOROIGUAL",86:"MAYOROIGUAL",89:"ACCESO_VECTORES",90:"FUNCIONES_NATIVAS",91:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,2],[6,1],[6,1],[22,3],[22,4],[28,3],[28,1],[23,7],[23,5],[23,6],[23,4],[24,7],[24,7],[24,7],[24,7],[24,7],[24,6],[24,6],[24,6],[24,6],[24,6],[31,4],[31,2],[40,1],[40,1],[40,1],[40,1],[40,1],[9,5],[9,5],[11,3],[11,3],[11,3],[11,3],[11,3],[12,4],[12,7],[12,10],[12,3],[12,3],[10,5],[10,5],[10,5],[10,5],[10,5],[34,3],[34,2],[43,3],[43,1],[13,5],[13,7],[13,6],[13,8],[53,6],[53,5],[21,2],[21,3],[15,7],[15,10],[15,9],[57,5],[57,4],[14,5],[16,9],[17,7],[18,7],[62,4],[62,3],[63,3],[63,2],[63,2],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,1],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,3],[30,3],[30,3],[30,2],[30,3],[30,3],[30,3],[30,3],[30,3],[30,3],[30,2],[30,2],[30,1],[30,1],[30,1],[30,1],[30,1],[87,5],[88,4],[88,4],[88,4],[88,4],[88,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 25: case 67:
this.$=[$$[$0]];
break;
case 4:
listaErrores.push(new errores.default('ERROR LEXICO', "No se esperaba el caracter " + $$[$0], _$[$0].first_line, _$[$0].first_column));
break;
case 5:
listaErrores.push(new errores.default('ERROR SINTACTICO', "Se esperaba token", _$[$0-1].first_line, _$[$0-1].first_column));
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 18: case 20: case 21: case 116: case 117: case 118:
this.$=$$[$0];
break;
case 16:
this.$=new insbreak.default(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 17:
this.$=new inscontinue.default(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 19: case 64:
this.$=$$[$0-1];
break;
case 22:
this.$= new llamada.default($$[$0-2],null,_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 23:
this.$= new llamada.default($$[$0-3],$$[$0-1],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 24: case 66:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 26:
this.$ = new funcion.default($$[$0-6],$$[$0-4],Tipo.DataType.VOID,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 27:
this.$ = new funcion.default($$[$0-4],$$[$0-2],Tipo.DataType.VOID,$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 28:
this.$ = new funcion.default($$[$0-5],null,Tipo.DataType.VOID,$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 29:
this.$ = new funcion.default($$[$0-3],null,Tipo.DataType.VOID,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 30:
this.$ = new funcion.default($$[$0-6],$$[$0-4],Tipo.DataType.ENTERO,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 31:
this.$ = new funcion.default($$[$0-6],$$[$0-4],Tipo.DataType.DECIMAL,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 32:
this.$ = new funcion.default($$[$0-6],$$[$0-4],Tipo.DataType.CADENA,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 33:
this.$ = new funcion.default($$[$0-6],$$[$0-4],Tipo.DataType.CARACTER,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 34:
this.$ = new funcion.default($$[$0-6],$$[$0-4],Tipo.DataType.BOOLEANO,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 35: case 36: case 37: case 38: case 39:
this.$ = new funcion.default($$[$0-5],null,Tipo.DataType.ENTERO,$$[$0],_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 40:
$$[$0-3].push($$[$0] + "," + $$[$0-1]); this.$ = $$[$0-3]
break;
case 41:
this.$= [$$[$0] + "," + $$[$0-1]];
break;
case 42:
this.$=Tipo.DataType.ENTERO;
break;
case 43:
this.$=Tipo.DataType.CADENA;
break;
case 44:
this.$=Tipo.DataType.CARACTER;
break;
case 45:
this.$=Tipo.DataType.DECIMAL;
break;
case 46:
this.$=Tipo.DataType.BOOLEANO;
break;
case 47:
this.$=new impresion.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 48:
this.$=new impresionconsalto.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 49:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.ENTERO, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 50:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.DECIMAL, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 51: case 52:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.CARACTER, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 53:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.BOOLEANO, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 54:
this.$= new Asignacion.default($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 55: case 56: case 119: case 120:
;
break;
case 57:
this.$ = new increment.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 58:
this.$ = new decrement.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 59:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.ENTERO, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 60:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.DECIMAL, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 61:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.CADENA, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 62:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.CARACTER, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 63:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.BOOLEANO, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 65:
this.$=[];
break;
case 68:
this.$=new insif.default($$[$0-2],$$[$0],null,null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 69:
this.$=new insif.default($$[$0-4],$$[$0-2],null,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 70:
this.$=new insif.default($$[$0-3],$$[$0-1],$$[$0],null,_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 71:
this.$=new insif.default($$[$0-5],$$[$0-3],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 72:
$$[$0-5].push(new elif.default($$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)); this.$=$$[$0-5]
break;
case 73:
this.$=[new elif.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)];
break;
case 74:
this.$=new insreturn.default(null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 75:
this.$=new insreturn.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 76:
this.$=new inswitch.default($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 77:
this.$= new inswitch.default($$[$0-7],$$[$0-4],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 78:
this.$= new inswitch.default($$[$0-6],null,$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 79:
$$[$0-4].push(new inscase.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)); this.$=$$[$0-4];
break;
case 80:
this.$=[new inscase.default($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column)];
break;
case 81:
this.$ = new inswhile.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 82:
this.$= new insfor.default($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 83:
this.$= new insdowhile.default($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 84:
this.$= new insdountil.default($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 85:
this.$=new DeclaracionAsignacion.default($$[$0-2],Tipo.DataType.ENTERO, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 86: case 87:
this.$= new Asignacion.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 88: case 114:
this.$ = new increment.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 89: case 115:
this.$ = new decrement.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 90:
this.$ = new nativo.default(Tipo.DataType.ENTERO,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 91:
this.$ = new nativo.default(Tipo.DataType.CADENA,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 92:
this.$ = new nativo.default(Tipo.DataType.CARACTER,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 93:
this.$ = new nativo.default(Tipo.DataType.DECIMAL,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 94:
this.$ = new identificador.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 95: case 96:
this.$ = new nativo.default(Tipo.DataType.BOOLEANO,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 97:
this.$ = new Aritmetica.default(Tipo.tipoOp.SUMA,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 98:
this.$ = new Aritmetica.default(Tipo.tipoOp.RESTA,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 99:
this.$ = new Aritmetica.default(Tipo.tipoOp.MULTIPLICACION,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 100:
this.$ = new Aritmetica.default(Tipo.tipoOp.DIVISION,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 101:
this.$ = new Aritmetica.default(Tipo.tipoOp.MODULO,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 102:
this.$ = new Aritmetica.default(Tipo.tipoOp.POTENCIA,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 103:
this.$ = new Unario.default($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 104:
this.$ = $$[$0-1];
break;
case 105:
this.$ = new Logico.default(Tipo.tipoLog.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 106:
this.$ = new Logico.default(Tipo.tipoLog.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 107:
this.$ = new Not.default($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 108:
this.$ = new Relacional.default(Tipo.tipoRel.IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 109:
this.$ = new Relacional.default(Tipo.tipoRel.DIFERENTE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 110:
this.$ = new Relacional.default(Tipo.tipoRel.MENOR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 111:
this.$ = new Relacional.default(Tipo.tipoRel.MAYOR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 112:
this.$ = new Relacional.default(Tipo.tipoRel.MENOR_IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 113:
this.$ = new Relacional.default(Tipo.tipoRel.MAYOR_IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 121:
this.$ = new opternario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 122:
this.$= new casteo.default(Tipo.DataType.ENTERO,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 123:
this.$= new casteo.default(Tipo.DataType.CADENA,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 124:
this.$= new casteo.default(Tipo.DataType.CARACTER,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 125:
this.$= new casteo.default(Tipo.DataType.BOOLEANO,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 126:
this.$= new casteo.default(Tipo.DataType.DECIMAL,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:21,25:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$Va,42:$Vb,43:29,51:$Vc,55:$Vd,56:$Ve,60:$Vf,61:$Vg,64:$Vh},{1:[3]},{5:[1,37],6:38,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:21,25:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$Va,42:$Vb,43:29,51:$Vc,55:$Vd,56:$Ve,60:$Vf,61:$Vg,64:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),{8:[1,39]},o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),{8:[1,40]},{8:[1,41]},o($Vi,[2,18]),{8:[1,42]},o($Vi,[2,20]),o($Vi,[2,21]),{26:[1,43]},{26:[1,44]},{25:$Vj,43:45},{25:$Vj,43:47},{25:$Vj,43:48},{25:$Vj,43:49},{25:$Vj,43:50},{29:$Vk,44:[1,51]},o($Vl,$Vm,{26:[1,56],45:[1,53],47:[1,54],48:[1,55]}),{26:[1,57]},{26:[1,58]},{26:[1,59]},{26:[1,60]},{34:61,49:$Vn},{8:[1,63],22:75,25:$Vo,26:$Vp,30:64,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,5]),o($Vi,[2,16]),o($Vi,[2,17]),o($Vi,[2,19]),{22:75,25:$Vo,26:$Vp,30:80,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:81,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{8:[1,83],29:$Vk,44:[1,82]},o($VA,$Vm),{8:[1,85],29:$Vk,44:[1,84]},{8:[1,87],29:$Vk,44:[1,86]},{8:[1,89],29:$Vk,44:[1,88]},{8:[1,91],29:$Vk,44:[1,90]},{22:75,25:$Vo,26:$Vp,30:92,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{25:[1,93]},{22:75,25:$Vo,26:$Vp,30:94,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{8:[1,95]},{8:[1,96]},{22:75,25:$Vo,26:$Vp,27:[1,97],28:98,30:100,31:99,35:$VB,36:$VC,37:$VD,38:$VE,39:$VF,40:101,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:107,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:108,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:109,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{25:[1,112],35:[1,111],62:110},{60:[1,113],65:[1,114]},{2:$V0,4:115,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:21,25:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$Va,42:$Vb,43:29,50:[1,116],51:$Vc,55:$Vd,56:$Ve,60:$Vf,61:$Vg,64:$Vh},o($Vi,[2,74]),{8:[1,117],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},o($VV,[2,90]),o($VV,[2,91]),o($VV,[2,92]),o($VV,[2,93]),o($VV,[2,94],{26:[1,135],47:[1,133],48:[1,134]}),o($VV,[2,95]),o($VV,[2,96]),{22:75,25:$Vo,26:$Vp,30:136,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:137,35:[1,138],36:[1,142],37:[1,139],38:[1,140],39:[1,141],66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:143,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},o($VV,[2,116]),o($VV,[2,117]),o($VV,[2,118]),o($VV,[2,119]),o($VV,[2,120]),{27:[1,144],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{27:[1,145],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{22:75,25:$Vo,26:$Vp,30:146,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},o($Vi,[2,49]),{22:75,25:$Vo,26:$Vp,30:147,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},o($Vi,[2,50]),{22:75,25:$Vo,26:$Vp,30:148,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},o($Vi,[2,52]),{22:75,25:$Vo,26:$Vp,30:149,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},o($Vi,[2,51]),{22:75,25:$Vo,26:$Vp,30:150,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},o($Vi,[2,53]),{8:[1,151],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},o($VA,[2,66]),{46:[1,152],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},o($Vi,[2,57]),o($Vi,[2,58]),{8:$VW,32:[1,153],34:154,49:$Vn},{27:[1,155],29:[1,156]},{27:[1,157],29:[1,158]},o($VX,[2,25],{72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU}),{25:[1,159]},{25:[2,42]},{25:[2,43]},{25:[2,44]},{25:[2,45]},{25:[2,46]},{27:[1,160],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{27:[1,161],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{27:[1,162],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{8:[1,163]},{25:$Vj,43:164},{44:[1,165]},{26:[1,166]},{26:[1,167]},{6:38,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:21,25:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$Va,42:$Vb,43:29,50:[1,168],51:$Vc,55:$Vd,56:$Ve,60:$Vf,61:$Vg,64:$Vh},o($VY,[2,65]),o($Vi,[2,75]),{22:75,25:$Vo,26:$Vp,30:169,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:170,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:171,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:172,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:173,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:174,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:175,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:176,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:177,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:178,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:179,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:180,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:181,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:182,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:183,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},o($VV,[2,114]),o($VV,[2,115]),{22:75,25:$Vo,26:$Vp,27:[1,184],28:98,30:100,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},o($VV,[2,103]),{27:[1,185],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{27:[1,186]},{27:[1,187]},{27:[1,188]},{27:[1,189]},{27:[1,190]},o($VZ,[2,107],{72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT}),{8:[1,191]},{8:[1,192]},{8:[1,193],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{8:[1,194],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{8:[1,195],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{8:[1,196],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{8:[1,197],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},o($Vi,[2,54]),{44:[1,198],45:[1,199]},{33:[1,200],35:[1,201],36:[1,204],37:[1,202],38:[1,203],39:[1,205]},o($Vi,[2,29]),o($VV,[2,23]),{22:75,25:$Vo,26:$Vp,30:206,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{32:[1,207],34:208,49:$Vn},{35:$VB,36:$VC,37:$VD,38:$VE,39:$VF,40:209},o($VX,[2,41]),{34:210,49:$Vn},{34:211,49:$Vn},{49:[1,212]},{22:75,25:$Vo,26:$Vp,30:213,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{29:$Vk,44:[1,214]},{22:75,25:$Vo,26:$Vp,30:215,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:216,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:217,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},o($VY,[2,64]),o($V_,[2,97],{74:$VI,75:$VJ,76:$VK,77:$VL}),o($V_,[2,98],{74:$VI,75:$VJ,76:$VK,77:$VL}),o($V$,[2,99],{77:$VL}),o($V$,[2,100],{77:$VL}),o($V$,[2,101],{77:$VL}),o($VV,[2,102]),o([8,27,29,32,46,78,91],[2,105],{72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT}),o($VZ,[2,106],{72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT}),o($V01,[2,108],{72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL}),o($V01,[2,109],{72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL}),o($V01,[2,110],{72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL}),o($V01,[2,111],{72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL}),o($V01,[2,112],{72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL}),o($V01,[2,113],{72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL}),{32:[1,218],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},o($VV,$VW),o($VV,[2,104]),{22:75,25:$Vo,26:$Vp,30:219,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:220,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:221,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:222,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:223,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},o($Vi,[2,47]),o($Vi,[2,48]),o($Vi,[2,59]),o($Vi,[2,60]),o($Vi,[2,61]),o($Vi,[2,62]),o($Vi,[2,63]),{22:75,25:$Vo,26:$Vp,30:224,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{22:75,25:$Vo,26:$Vp,30:225,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{34:226,49:$Vn},{34:227,49:$Vn},{34:228,49:$Vn},{34:229,49:$Vn},{34:230,49:$Vn},{34:231,49:$Vn},o($VX,[2,24],{72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU}),{33:[1,232],35:[1,233],36:[1,234],37:[1,235],38:[1,236],39:[1,237]},o($Vi,[2,27]),{25:[1,238]},o($Vi,[2,68],{53:240,52:[1,239],54:[1,241]}),o($Vi,[2,81]),{57:242,58:[1,243],59:[1,244]},{8:[1,245],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{22:75,25:$Vo,26:$Vp,30:246,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{8:[2,86],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{27:[1,247],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{27:[1,248],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{22:75,25:$Vo,26:$Vp,30:249,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},o($VV,[2,122]),o($VV,[2,123]),o($VV,[2,124]),o($VV,[2,125]),o($VV,[2,126]),{8:[1,250],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{46:[1,251],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},o($Vi,[2,28]),o($Vi,[2,35]),o($Vi,[2,36]),o($Vi,[2,37]),o($Vi,[2,38]),o($Vi,[2,39]),{34:252,49:$Vn},{34:253,49:$Vn},{34:254,49:$Vn},{34:255,49:$Vn},{34:256,49:$Vn},{34:257,49:$Vn},o($VX,[2,40]),{34:258,49:$Vn},o($Vi,[2,70],{52:[1,259],54:[1,260]}),{26:[1,261]},{50:[1,262],58:[1,263],59:[1,264]},{32:[1,265]},{22:75,25:$Vo,26:$Vp,30:266,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{25:[1,269],43:268,63:267},{8:[2,85],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{8:[1,270]},{8:[1,271]},o([8,27,29,32,46,91],[2,121],{72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT}),o($Vi,[2,55]),{44:[1,272]},o($Vi,[2,26]),o($Vi,[2,30]),o($Vi,[2,31]),o($Vi,[2,32]),o($Vi,[2,33]),o($Vi,[2,34]),o($Vi,[2,69]),{34:273,49:$Vn},{26:[1,274]},{22:75,25:$Vo,26:$Vp,30:275,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},o($Vi,[2,76]),{32:[1,276]},{22:75,25:$Vo,26:$Vp,30:277,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{2:$V0,4:278,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:21,25:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$Va,42:$Vb,43:29,51:$Vc,55:$Vd,56:$Ve,60:$Vf,61:$Vg,64:$Vh},{32:[1,279],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{27:[1,280]},{29:$Vk,44:[1,281]},o($Vl,$Vm,{47:[1,282],48:[1,283]}),o($Vi,[2,83]),o($Vi,[2,84]),{22:75,25:$Vo,26:$Vp,30:284,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},o($Vi,[2,71]),{22:75,25:$Vo,26:$Vp,30:285,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{27:[1,286],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{2:$V0,4:287,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:21,25:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$Va,42:$Vb,43:29,51:$Vc,55:$Vd,56:$Ve,60:$Vf,61:$Vg,64:$Vh},{32:[1,288],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{6:38,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:21,25:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$Va,42:$Vb,43:29,50:[1,289],51:$Vc,55:$Vd,56:$Ve,60:$Vf,61:$Vg,64:$Vh},{2:$V0,4:290,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:21,25:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$Va,42:$Vb,43:29,51:$Vc,55:$Vd,56:$Ve,60:$Vf,61:$Vg,64:$Vh},{34:291,49:$Vn},{22:75,25:$Vo,26:$Vp,30:292,66:$Vq,67:$Vr,68:$Vs,69:$Vt,70:$Vu,71:$Vv,73:$Vw,80:$Vx,87:76,88:77,89:$Vy,90:$Vz},{27:[2,88]},{27:[2,89]},{8:[1,293],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{27:[1,294],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},{34:295,49:$Vn},{6:38,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:21,25:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$Va,42:$Vb,43:29,50:[1,296],51:$Vc,55:$Vd,56:$Ve,60:$Vf,61:$Vg,64:$Vh},{2:$V0,4:297,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:19,23:20,24:21,25:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$Va,42:$Vb,43:29,51:$Vc,55:$Vd,56:$Ve,60:$Vf,61:$Vg,64:$Vh},o($Vi,[2,78]),o($V11,[2,80],{9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,21:18,22:19,23:20,24:21,43:29,6:38,19:$V2,20:$V3,25:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$Va,42:$Vb,51:$Vc,55:$Vd,56:$Ve,60:$Vf,61:$Vg,64:$Vh}),o($Vi,[2,82]),{27:[2,87],72:$VG,73:$VH,74:$VI,75:$VJ,76:$VK,77:$VL,78:$VM,79:$VN,81:$VO,82:$VP,83:$VQ,84:$VR,85:$VS,86:$VT,91:$VU},o($Vi,[2,56]),{34:298,49:$Vn},o($V21,[2,73]),o($Vi,[2,77]),o($V11,[2,79],{9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,21:18,22:19,23:20,24:21,43:29,6:38,19:$V2,20:$V3,25:$V4,35:$V5,36:$V6,37:$V7,38:$V8,39:$V9,41:$Va,42:$Vb,51:$Vc,55:$Vd,56:$Ve,60:$Vf,61:$Vg,64:$Vh}),o($V21,[2,72])],
defaultActions: {37:[2,1],102:[2,42],103:[2,43],104:[2,44],105:[2,45],106:[2,46],282:[2,88],283:[2,89]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo js
    const listaErrores = require('../../../controller/parser/parser')
    const errores = require('./Exceptions/Error')
    const nativo = require('./Expresions/Native');
    const Tipo = require('./Data/Data');
    const impresion = require('./Instructions/imprimir');
    const impresionconsalto = require('./Instructions/ImprimirConSalto');
    const DeclaracionAsignacion = require('./Instructions/DeclaracionAsignacion');
    const Declaracion = require('./Instructions/Declaracion');
    const Asignacion = require('./Instructions/Asignacion');
    const Aritmetica = require('./Expresions/Aritmetica');
    const Unario = require('./Expresions/Unario');
    const Not = require('./Expresions/Not');
    const Relacional = require('./Expresions/Relacional');
    const Logico = require('./Expresions/Logico');
    const insif = require('./Instructions/Sentencia_If');
    const simbolo = require('./Symbol/Symbol');
    const elif = require('./Instructions/Elif');
    const inswhile = require('./Instructions/Ciclo_While');
    const insbreak = require('./Instructions/Break');
    const inswitch = require('./Instructions/Sentencia_Switch');
    const inscase = require('./Instructions/Caso');
    const opternario = require('./Expresions/Operador_Ternario');
    const identificador = require('./Expresions/Identificador');
    const casteo = require('./Expresions/Casteo');
    const increment = require('./Expresions/Incremento');
    const decrement = require('./Expresions/Decremento');
    const insfor = require('./Instructions/Ciclo_For');
    const insdowhile = require('./Instructions/CicloDoWhile');
    const insdountil = require('./Instructions/CicloDoUntil');
    const insreturn = require('./Instructions/Return');
    const inscontinue = require('./Instructions/Continue');
    const funcion = require('./Instructions/Funcion');
    const llamada = require('./Instructions/LlamadaFuncion');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://comentario unilinea
break;
case 1://comentario multilinea
break;
case 2://EXPACIOS EN BLANCO
break;
case 3:return 35;
break;
case 4:return 36;
break;
case 5:return 39;
break;
case 6:return 38;
break;
case 7:return 37;
break;
case 8:return 70;
break;
case 9:return 71;
break;
case 10:return 51;
break;
case 11:return 52;
break;
case 12:return 54;
break;
case 13:return 56;
break;
case 14:return 59;
break;
case 15:return 58;
break;
case 16:return 19;
break;
case 17:return 60;
break;
case 18:return 61;
break;
case 19:return 64;
break;
case 20:return 65;
break;
case 21:return 20;
break;
case 22:return 55;
break;
case 23:return 33;
break;
case 24:return 41;
break;
case 25:return 42;
break;
case 26:return 'RTOLOWER';
break;
case 27:return 'RTOUPPER';
break;
case 28:return 'RROUND';
break;
case 29:return 'RLENGTH';
break;
case 30:return 'RTYPEOF';
break;
case 31:return 'RTOSTRING';
break;
case 32:return 'RTOCHARARRAY';
break;
case 33:return 'RPUSH';
break;
case 34:return 'RPOP';
break;
case 35:return 'RRUN';
break;
case 36:return 'RNEW';
break;
case 37:return 47;
break;
case 38:return 48;
break;
case 39:return 76;
break;
case 40:return 86;
break;
case 41:return 85;
break;
case 42:return 81;
break;
case 43:return 82;
break;
case 44:return 84;
break;
case 45:return 83;
break;
case 46:return 72;
break;
case 47:return 73;
break;
case 48:return 74;
break;
case 49:return 75;
break;
case 50:return 77;
break;
case 51:console.log(yy_.yytext);return 44;
break;
case 52:return 78;
break;
case 53:return 79;
break;
case 54:return 80;
break;
case 55:return 91;
break;
case 56:return 32;
break;
case 57:return 26;
break;
case 58:return 27;
break;
case 59:console.log(yy_.yytext);return 8;
break;
case 60:return 49;
break;
case 61:return 50;
break;
case 62:return 29;
break;
case 63:return 'PUNTO';
break;
case 64:return 45;
break;
case 65:return 46;
break;
case 66: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 67; 
break;
case 67:console.log(yy_.yytext);return 69;
break;
case 68:console.log(yy_.yytext);return 66;
break;
case 69: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 68; 
break;
case 70:console.log(yy_.yytext);return 25;
break;
case 71:return 5;
break;
case 72:return 7;
break;
}
},
rules: [/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:new\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[\"](((\\')|(\\")|(\\n)|(\\t)|(\\))|[^\\\"\n])*[\"])/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:'(([^\"\'\\\\]{0,1}|\\'|\\"|\\n|\\r|\\t|\\\\))')/i,/^(?:([a-zA-Z_$])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}