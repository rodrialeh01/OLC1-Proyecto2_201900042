/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[1,16],$V3=[1,17],$V4=[1,19],$V5=[1,20],$V6=[1,21],$V7=[1,22],$V8=[1,24],$V9=[1,23],$Va=[1,25],$Vb=[1,27],$Vc=[1,28],$Vd=[1,33],$Ve=[1,30],$Vf=[1,29],$Vg=[1,31],$Vh=[1,32],$Vi=[5,19,20,22,26,27,29,30,31,32,34,41,43,47,48,50,52,53,54,57],$Vj=[1,42],$Vk=[1,48],$Vl=[33,42],$Vm=[2,39],$Vn=[1,57],$Vo=[1,68],$Vp=[1,64],$Vq=[1,60],$Vr=[1,61],$Vs=[1,62],$Vt=[1,63],$Vu=[1,65],$Vv=[1,66],$Vw=[1,67],$Vx=[1,69],$Vy=[1,70],$Vz=[1,73],$VA=[1,74],$VB=[8,33,42],$VC=[1,103],$VD=[1,104],$VE=[1,105],$VF=[1,106],$VG=[1,107],$VH=[1,108],$VI=[1,109],$VJ=[1,110],$VK=[1,111],$VL=[1,112],$VM=[1,113],$VN=[1,114],$VO=[1,115],$VP=[1,116],$VQ=[1,117],$VR=[8,25,36,51,65,66,67,68,69,70,71,72,74,75,76,77,78,79,85],$VS=[5,19,20,22,26,27,29,30,31,32,34,41,43,44,46,47,48,50,52,53,54,57,58],$VT=[8,25,36,51,71,72,85],$VU=[8,25,36,51,65,66,71,72,74,75,76,77,78,79,85],$VV=[8,25,36,51,65,66,67,68,69,71,72,74,75,76,77,78,79,85],$VW=[8,25,36,51,71,72,74,75,76,77,78,79,85],$VX=[41,50,52],$VY=[5,19,20,22,26,27,29,30,31,32,34,41,43,44,46,47,48,50,52,53,54,57];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"AMBITO_GLOBAL":6,"INVALID":7,"PTCOMA":8,"IMPRIMIR":9,"DECLARACION_ASIGNACION":10,"DECLARACION":11,"ASIGNACION":12,"SENTENCIA_IF":13,"CICLO_WHILE":14,"SENTENCIA_SWITCH":15,"CICLO_FOR":16,"CICLO_DO_WHILE":17,"CICLO_DO_UNTIL":18,"RBREAK":19,"RCONTINUE":20,"INS_RETURN":21,"RPRINT":22,"PARABRE":23,"EXPRESION":24,"PARCIERRA":25,"RPRINTLN":26,"RINT":27,"LISTA_IDENTIFICADORES":28,"RDOUBLE":29,"RCHAR":30,"RSTRING":31,"RBOOLEAN":32,"IGUAL":33,"IDENTIFICADOR":34,"CORABRE":35,"CORCIERRA":36,"INCREMENTO":37,"DECREMENTO":38,"ENCAPSULAMIENTO":39,"LLAVEA":40,"LLAVEC":41,"COMA":42,"RIF":43,"RELSE":44,"LISTA_ELIF":45,"RELIF":46,"RRETURN":47,"RSWITCH":48,"LISTA_CASES":49,"RDEFAULT":50,"DOSPUNTOS":51,"RCASE":52,"RWHILE":53,"RFOR":54,"DECLARACION_ASIG_FOR":55,"ACTUALIZACION_FOR":56,"RDO":57,"RUNTIL":58,"ENTERO":59,"CADENA":60,"CARACTER":61,"DECIMAL":62,"RTRUE":63,"RFALSE":64,"MAS":65,"MENOS":66,"MULTIPLICACION":67,"DIVISION":68,"MODULO":69,"POTENCIA":70,"OR":71,"AND":72,"NOT":73,"IGUALIGUAL":74,"DIFERENTE":75,"MENOR":76,"MAYOR":77,"MENOROIGUAL":78,"MAYOROIGUAL":79,"LLAMADA":80,"OPERADOR_TERNARIO":81,"CASTEOS":82,"ACCESO_VECTORES":83,"FUNCIONES_NATIVAS":84,"INTERROGACION":85,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"INVALID",8:"PTCOMA",19:"RBREAK",20:"RCONTINUE",22:"RPRINT",23:"PARABRE",25:"PARCIERRA",26:"RPRINTLN",27:"RINT",29:"RDOUBLE",30:"RCHAR",31:"RSTRING",32:"RBOOLEAN",33:"IGUAL",34:"IDENTIFICADOR",35:"CORABRE",36:"CORCIERRA",37:"INCREMENTO",38:"DECREMENTO",40:"LLAVEA",41:"LLAVEC",42:"COMA",43:"RIF",44:"RELSE",46:"RELIF",47:"RRETURN",48:"RSWITCH",50:"RDEFAULT",51:"DOSPUNTOS",52:"RCASE",53:"RWHILE",54:"RFOR",57:"RDO",58:"RUNTIL",59:"ENTERO",60:"CADENA",61:"CARACTER",62:"DECIMAL",63:"RTRUE",64:"RFALSE",65:"MAS",66:"MENOS",67:"MULTIPLICACION",68:"DIVISION",69:"MODULO",70:"POTENCIA",71:"OR",72:"AND",73:"NOT",74:"IGUALIGUAL",75:"DIFERENTE",76:"MENOR",77:"MAYOR",78:"MENOROIGUAL",79:"MAYOROIGUAL",80:"LLAMADA",83:"ACCESO_VECTORES",84:"FUNCIONES_NATIVAS",85:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[9,5],[9,5],[11,3],[11,3],[11,3],[11,3],[11,3],[12,4],[12,7],[12,10],[12,3],[12,3],[10,5],[10,5],[10,5],[10,5],[10,5],[39,3],[39,2],[28,3],[28,1],[13,5],[13,7],[13,6],[13,8],[45,6],[45,5],[21,2],[21,3],[15,7],[15,10],[15,9],[49,5],[49,4],[14,5],[16,9],[17,7],[18,7],[55,4],[55,3],[56,3],[56,2],[56,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,3],[24,3],[24,3],[24,2],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,2],[24,1],[24,1],[24,1],[24,1],[24,1],[81,5],[82,4],[82,4],[82,4],[82,4],[82,4]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 39:
this.$=[$$[$0]];
break;
case 4:
controller.listaErrores.push(new errores.default('ERROR LEXICO', "No se esperaba el caracter " + $$[$0], _$[$0].first_line, _$[$0].first_column));
break;
case 5:
controller.listaErrores.push(new errores.default('ERROR SINTACTICO', "Se esperaba token", _$[$0-1].first_line, _$[$0-1].first_column));
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 14: case 15: case 18: case 89: case 90:
this.$=$$[$0];
break;
case 16:
this.$=new insbreak.default(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 17:
this.$=new inscontinue.default(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 19:
this.$=new impresion.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 20:
this.$=new impresionconsalto.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 21:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.ENTERO, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 22:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.DECIMAL, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 23: case 24:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.CARACTER, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 25:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.BOOLEANO, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 26:
this.$= new Asignacion.default($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 27: case 28: case 88: case 91: case 92:
;
break;
case 29:
this.$ = new increment.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 30:
this.$ = new decrement.default($$[$0-2],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 31:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.ENTERO, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 32:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.DECIMAL, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 33:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.CADENA, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 34:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.CARACTER, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 35:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.BOOLEANO, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 36:
this.$=$$[$0-1];
break;
case 37:
this.$=[];
break;
case 38:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];console.log(this.$)
break;
case 40:
this.$=new insif.default($$[$0-2],$$[$0],null,null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 41:
this.$=new insif.default($$[$0-4],$$[$0-2],null,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 42:
this.$=new insif.default($$[$0-3],$$[$0-1],$$[$0],null,_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 43:
this.$=new insif.default($$[$0-5],$$[$0-3],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 44:
$$[$0-5].push(new elif.default($$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)); this.$=$$[$0-5]
break;
case 45:
this.$=[new elif.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)];
break;
case 46:
this.$=new insreturn.default(null,_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 47:
this.$=new insreturn.default($$[$0-1],_$[$0-2].first_line,_$[$0-2].first_column);
break;
case 48:
this.$=new inswitch.default($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 49:
this.$= new inswitch.default($$[$0-7],$$[$0-4],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 50:
this.$= new inswitch.default($$[$0-6],null,$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 51:
$$[$0-4].push(new inscase.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)); this.$=$$[$0-4];
break;
case 52:
this.$=[new inscase.default($$[$0-2],$$[$0],_$[$0-3].first_line,_$[$0-3].first_column)];
break;
case 53:
this.$ = new inswhile.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 54:
this.$= new insfor.default($$[$0-6],$$[$0-4],$$[$0-2],$$[$0],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 55:
this.$= new insdowhile.default($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 56:
this.$= new insdountil.default($$[$0-2],$$[$0-5],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 57:
this.$=new DeclaracionAsignacion.default($$[$0-2],Tipo.DataType.ENTERO, $$[$0], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 58: case 59:
this.$= new Asignacion.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 60: case 86:
this.$ = new increment.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 61: case 87:
this.$ = new decrement.default($$[$0-1],_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 62:
this.$ = new nativo.default(Tipo.DataType.ENTERO,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 63:
this.$ = new nativo.default(Tipo.DataType.CADENA,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 64:
this.$ = new nativo.default(Tipo.DataType.CARACTER,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 65:
this.$ = new nativo.default(Tipo.DataType.DECIMAL,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 66:
this.$ = new identificador.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 67: case 68:
this.$ = new nativo.default(Tipo.DataType.BOOLEANO,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 69:
this.$ = new Aritmetica.default(Tipo.tipoOp.SUMA,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 70:
this.$ = new Aritmetica.default(Tipo.tipoOp.RESTA,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 71:
this.$ = new Aritmetica.default(Tipo.tipoOp.MULTIPLICACION,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 72:
this.$ = new Aritmetica.default(Tipo.tipoOp.DIVISION,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 73:
this.$ = new Aritmetica.default(Tipo.tipoOp.MODULO,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 74:
this.$ = new Aritmetica.default(Tipo.tipoOp.POTENCIA,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 75:
this.$ = new Unario.default($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 76:
this.$ = $$[$0-1];
break;
case 77:
this.$ = new Logico.default(Tipo.tipoLog.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 78:
this.$ = new Logico.default(Tipo.tipoLog.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 79:
this.$ = new Not.default($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 80:
this.$ = new Relacional.default(Tipo.tipoRel.IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 81:
this.$ = new Relacional.default(Tipo.tipoRel.DIFERENTE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 82:
this.$ = new Relacional.default(Tipo.tipoRel.MENOR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 83:
this.$ = new Relacional.default(Tipo.tipoRel.MAYOR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 84:
this.$ = new Relacional.default(Tipo.tipoRel.MENOR_IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 85:
this.$ = new Relacional.default(Tipo.tipoRel.MAYOR_IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 93:
this.$ = new opternario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 94:
this.$= new casteo.default(Tipo.DataType.ENTERO,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 95:
this.$= new casteo.default(Tipo.DataType.CADENA,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 96:
this.$= new casteo.default(Tipo.DataType.CARACTER,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 97:
this.$= new casteo.default(Tipo.DataType.BOOLEANO,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
case 98:
this.$= new casteo.default(Tipo.DataType.DECIMAL,$$[$0],_$[$0-3].first_line,_$[$0-3].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:$V4,26:$V5,27:$V6,28:26,29:$V7,30:$V8,31:$V9,32:$Va,34:$Vb,43:$Vc,47:$Vd,48:$Ve,53:$Vf,54:$Vg,57:$Vh},{1:[3]},{5:[1,34],6:35,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:$V4,26:$V5,27:$V6,28:26,29:$V7,30:$V8,31:$V9,32:$Va,34:$Vb,43:$Vc,47:$Vd,48:$Ve,53:$Vf,54:$Vg,57:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),{8:[1,36]},o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),{8:[1,37]},{8:[1,38]},o($Vi,[2,18]),{23:[1,39]},{23:[1,40]},{28:41,34:$Vj},{28:43,34:$Vj},{28:44,34:$Vj},{28:45,34:$Vj},{28:46,34:$Vj},{33:[1,47],42:$Vk},o($Vl,$Vm,{35:[1,49],37:[1,50],38:[1,51]}),{23:[1,52]},{23:[1,53]},{23:[1,54]},{23:[1,55]},{39:56,40:$Vn},{8:[1,58],23:$Vo,24:59,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,5]),o($Vi,[2,16]),o($Vi,[2,17]),{23:$Vo,24:75,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:76,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{8:[1,78],33:[1,77],42:$Vk},o($VB,$Vm),{8:[1,80],33:[1,79],42:$Vk},{8:[1,82],33:[1,81],42:$Vk},{8:[1,84],33:[1,83],42:$Vk},{8:[1,86],33:[1,85],42:$Vk},{23:$Vo,24:87,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{34:[1,88]},{23:$Vo,24:89,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{8:[1,90]},{8:[1,91]},{23:$Vo,24:92,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:93,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:94,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{27:[1,96],34:[1,97],55:95},{53:[1,98],58:[1,99]},{2:$V0,4:100,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:$V4,26:$V5,27:$V6,28:26,29:$V7,30:$V8,31:$V9,32:$Va,34:$Vb,41:[1,101],43:$Vc,47:$Vd,48:$Ve,53:$Vf,54:$Vg,57:$Vh},o($Vi,[2,46]),{8:[1,102],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},o($VR,[2,62]),o($VR,[2,63]),o($VR,[2,64]),o($VR,[2,65]),o($VR,[2,66],{37:[1,118],38:[1,119]}),o($VR,[2,67]),o($VR,[2,68]),{23:$Vo,24:120,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:121,27:[1,122],29:[1,126],30:[1,124],31:[1,123],32:[1,125],34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:127,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},o($VR,[2,88]),o($VR,[2,89]),o($VR,[2,90]),o($VR,[2,91]),o($VR,[2,92]),{25:[1,128],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{25:[1,129],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{23:$Vo,24:130,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},o($Vi,[2,21]),{23:$Vo,24:131,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},o($Vi,[2,22]),{23:$Vo,24:132,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},o($Vi,[2,24]),{23:$Vo,24:133,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},o($Vi,[2,23]),{23:$Vo,24:134,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},o($Vi,[2,25]),{8:[1,135],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},o($VB,[2,38]),{36:[1,136],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},o($Vi,[2,29]),o($Vi,[2,30]),{25:[1,137],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{25:[1,138],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{25:[1,139],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{8:[1,140]},{28:141,34:$Vj},{33:[1,142]},{23:[1,143]},{23:[1,144]},{6:35,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:$V4,26:$V5,27:$V6,28:26,29:$V7,30:$V8,31:$V9,32:$Va,34:$Vb,41:[1,145],43:$Vc,47:$Vd,48:$Ve,53:$Vf,54:$Vg,57:$Vh},o($VS,[2,37]),o($Vi,[2,47]),{23:$Vo,24:146,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:147,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:148,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:149,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:150,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:151,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:152,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:153,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:154,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:155,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:156,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:157,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:158,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:159,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:160,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},o($VR,[2,86]),o($VR,[2,87]),o($VR,[2,75]),{25:[1,161],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{25:[1,162]},{25:[1,163]},{25:[1,164]},{25:[1,165]},{25:[1,166]},o($VT,[2,79],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP}),{8:[1,167]},{8:[1,168]},{8:[1,169],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{8:[1,170],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{8:[1,171],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{8:[1,172],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{8:[1,173],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},o($Vi,[2,26]),{33:[1,174],35:[1,175]},{39:176,40:$Vn},{39:177,40:$Vn},{40:[1,178]},{23:$Vo,24:179,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{33:[1,180],42:$Vk},{23:$Vo,24:181,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:182,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:183,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},o($VS,[2,36]),o($VU,[2,69],{67:$VE,68:$VF,69:$VG,70:$VH}),o($VU,[2,70],{67:$VE,68:$VF,69:$VG,70:$VH}),o($VV,[2,71],{70:$VH}),o($VV,[2,72],{70:$VH}),o($VV,[2,73],{70:$VH}),o($VR,[2,74]),o([8,25,36,51,71,85],[2,77],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP}),o($VT,[2,78],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP}),o($VW,[2,80],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH}),o($VW,[2,81],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH}),o($VW,[2,82],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH}),o($VW,[2,83],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH}),o($VW,[2,84],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH}),o($VW,[2,85],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH}),{51:[1,184],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},o($VR,[2,76]),{23:$Vo,24:185,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:186,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:187,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:188,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:189,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},o($Vi,[2,19]),o($Vi,[2,20]),o($Vi,[2,31]),o($Vi,[2,32]),o($Vi,[2,33]),o($Vi,[2,34]),o($Vi,[2,35]),{23:$Vo,24:190,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{23:$Vo,24:191,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},o($Vi,[2,40],{45:193,44:[1,192],46:[1,194]}),o($Vi,[2,53]),{49:195,50:[1,196],52:[1,197]},{8:[1,198],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{23:$Vo,24:199,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{8:[2,58],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{25:[1,200],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{25:[1,201],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{23:$Vo,24:202,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},o($VR,[2,94]),o($VR,[2,95]),o($VR,[2,96]),o($VR,[2,97]),o($VR,[2,98]),{8:[1,203],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{36:[1,204],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{39:205,40:$Vn},o($Vi,[2,42],{44:[1,206],46:[1,207]}),{23:[1,208]},{41:[1,209],50:[1,210],52:[1,211]},{51:[1,212]},{23:$Vo,24:213,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{28:215,34:[1,216],56:214},{8:[2,57],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{8:[1,217]},{8:[1,218]},o([8,25,36,51,85],[2,93],{65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP}),o($Vi,[2,27]),{33:[1,219]},o($Vi,[2,41]),{39:220,40:$Vn},{23:[1,221]},{23:$Vo,24:222,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},o($Vi,[2,48]),{51:[1,223]},{23:$Vo,24:224,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{2:$V0,4:225,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:$V4,26:$V5,27:$V6,28:26,29:$V7,30:$V8,31:$V9,32:$Va,34:$Vb,43:$Vc,47:$Vd,48:$Ve,53:$Vf,54:$Vg,57:$Vh},{51:[1,226],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{25:[1,227]},{33:[1,228],42:$Vk},o($Vl,$Vm,{37:[1,229],38:[1,230]}),o($Vi,[2,55]),o($Vi,[2,56]),{23:$Vo,24:231,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},o($Vi,[2,43]),{23:$Vo,24:232,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{25:[1,233],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{2:$V0,4:234,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:$V4,26:$V5,27:$V6,28:26,29:$V7,30:$V8,31:$V9,32:$Va,34:$Vb,43:$Vc,47:$Vd,48:$Ve,53:$Vf,54:$Vg,57:$Vh},{51:[1,235],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{6:35,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:$V4,26:$V5,27:$V6,28:26,29:$V7,30:$V8,31:$V9,32:$Va,34:$Vb,41:[1,236],43:$Vc,47:$Vd,48:$Ve,53:$Vf,54:$Vg,57:$Vh},{2:$V0,4:237,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:$V4,26:$V5,27:$V6,28:26,29:$V7,30:$V8,31:$V9,32:$Va,34:$Vb,43:$Vc,47:$Vd,48:$Ve,53:$Vf,54:$Vg,57:$Vh},{39:238,40:$Vn},{23:$Vo,24:239,34:$Vp,59:$Vq,60:$Vr,61:$Vs,62:$Vt,63:$Vu,64:$Vv,66:$Vw,73:$Vx,80:$Vy,81:71,82:72,83:$Vz,84:$VA},{25:[2,60]},{25:[2,61]},{8:[1,240],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{25:[1,241],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},{39:242,40:$Vn},{6:35,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:$V4,26:$V5,27:$V6,28:26,29:$V7,30:$V8,31:$V9,32:$Va,34:$Vb,41:[1,243],43:$Vc,47:$Vd,48:$Ve,53:$Vf,54:$Vg,57:$Vh},{2:$V0,4:244,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,19:$V2,20:$V3,21:18,22:$V4,26:$V5,27:$V6,28:26,29:$V7,30:$V8,31:$V9,32:$Va,34:$Vb,43:$Vc,47:$Vd,48:$Ve,53:$Vf,54:$Vg,57:$Vh},o($Vi,[2,50]),o($VX,[2,52],{9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,21:18,28:26,6:35,19:$V2,20:$V3,22:$V4,26:$V5,27:$V6,29:$V7,30:$V8,31:$V9,32:$Va,34:$Vb,43:$Vc,47:$Vd,48:$Ve,53:$Vf,54:$Vg,57:$Vh}),o($Vi,[2,54]),{25:[2,59],65:$VC,66:$VD,67:$VE,68:$VF,69:$VG,70:$VH,71:$VI,72:$VJ,74:$VK,75:$VL,76:$VM,77:$VN,78:$VO,79:$VP,85:$VQ},o($Vi,[2,28]),{39:245,40:$Vn},o($VY,[2,45]),o($Vi,[2,49]),o($VX,[2,51],{9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:14,18:15,21:18,28:26,6:35,19:$V2,20:$V3,22:$V4,26:$V5,27:$V6,29:$V7,30:$V8,31:$V9,32:$Va,34:$Vb,43:$Vc,47:$Vd,48:$Ve,53:$Vf,54:$Vg,57:$Vh}),o($VY,[2,44])],
defaultActions: {34:[2,1],229:[2,60],230:[2,61]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo js
    const controller = require('../../../controller/parser/parser')
    const errores = require('./Exceptions/Error')
    const nativo = require('./Expresions/Native');
    const Tipo = require('./Data/Data');
    const impresion = require('./Instructions/imprimir');
    const impresionconsalto = require('./Instructions/ImprimirConSalto');
    const DeclaracionAsignacion = require('./Instructions/DeclaracionAsignacion');
    const Declaracion = require('./Instructions/Declaracion');
    const Asignacion = require('./Instructions/Asignacion');
    const Aritmetica = require('./Expresions/Aritmetica');
    const Unario = require('./Expresions/Unario');
    const Not = require('./Expresions/Not');
    const Relacional = require('./Expresions/Relacional');
    const Logico = require('./Expresions/Logico');
    const insif = require('./Instructions/Sentencia_If');
    const simbolo = require('./Symbol/Symbol');
    const elif = require('./Instructions/Elif');
    const inswhile = require('./Instructions/Ciclo_While');
    const insbreak = require('./Instructions/Break');
    const inswitch = require('./Instructions/Sentencia_Switch');
    const inscase = require('./Instructions/Caso');
    const opternario = require('./Expresions/Operador_Ternario');
    const identificador = require('./Expresions/Identificador');
    const casteo = require('./Expresions/Casteo');
    const increment = require('./Expresions/Incremento');
    const decrement = require('./Expresions/Decremento');
    const insfor = require('./Instructions/Ciclo_For');
    const insdowhile = require('./Instructions/CicloDoWhile');
    const insdountil = require('./Instructions/CicloDoUntil');
    const insreturn = require('./Instructions/Return');
    const inscontinue = require('./Instructions/Continue');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://comentario unilinea
break;
case 1://comentario multilinea
break;
case 2://EXPACIOS EN BLANCO
break;
case 3:console.log(yy_.yytext);return 27
break;
case 4:return 29;
break;
case 5:return 32;
break;
case 6:return 30;
break;
case 7:return 31;
break;
case 8:return 63;
break;
case 9:return 64;
break;
case 10:return 43;
break;
case 11:return 44;
break;
case 12:return 46;
break;
case 13:return 48;
break;
case 14:return 52;
break;
case 15:return 50;
break;
case 16:return 19;
break;
case 17:return 53;
break;
case 18:return 54;
break;
case 19:return 57;
break;
case 20:return 58;
break;
case 21:return 20;
break;
case 22:return 47;
break;
case 23:return 'RVOID';
break;
case 24:return 22;
break;
case 25:return 26;
break;
case 26:return 'RTOLOWER';
break;
case 27:return 'RTOUPPER';
break;
case 28:return 'RROUND';
break;
case 29:return 'RLENGTH';
break;
case 30:return 'RTYPEOF';
break;
case 31:return 'RTOSTRING';
break;
case 32:return 'RTOCHARARRAY';
break;
case 33:return 'RPUSH';
break;
case 34:return 'RPOP';
break;
case 35:return 'RRUN';
break;
case 36:return 'RNEW';
break;
case 37:return 37;
break;
case 38:return 38;
break;
case 39:return 69;
break;
case 40:return 79;
break;
case 41:return 78;
break;
case 42:return 74;
break;
case 43:return 75;
break;
case 44:return 77;
break;
case 45:return 76;
break;
case 46:return 65;
break;
case 47:return 66;
break;
case 48:return 67;
break;
case 49:return 68;
break;
case 50:return 70;
break;
case 51:console.log(yy_.yytext);return 33;
break;
case 52:return 71;
break;
case 53:return 72;
break;
case 54:return 73;
break;
case 55:return 85;
break;
case 56:return 51;
break;
case 57:return 23;
break;
case 58:return 25;
break;
case 59:console.log(yy_.yytext);return 8;
break;
case 60:return 40;
break;
case 61:return 41;
break;
case 62:return 42;
break;
case 63:return 'PUNTO';
break;
case 64:return 35;
break;
case 65:return 36;
break;
case 66: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 60; 
break;
case 67:console.log(yy_.yytext);return 62;
break;
case 68:console.log(yy_.yytext);return 59;
break;
case 69: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 61; 
break;
case 70:console.log(yy_.yytext);return 34;
break;
case 71:return 5;
break;
case 72:return 7;
break;
}
},
rules: [/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:new\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[\"](((\\')|(\\")|(\\n)|(\\t)|(\\))|[^\\\"\n])*[\"])/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:'(([^\"\'\\\\]{0,1}|\\'|\\"|\\n|\\r|\\t|\\\\))')/i,/^(?:([a-zA-Z_$])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}