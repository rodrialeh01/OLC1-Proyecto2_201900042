/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var analizador = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,4],$V2=[1,14],$V3=[1,15],$V4=[1,16],$V5=[1,17],$V6=[1,19],$V7=[1,18],$V8=[1,20],$V9=[1,22],$Va=[1,23],$Vb=[1,24],$Vc=[1,25],$Vd=[1,26],$Ve=[5,17,21,22,24,25,26,27,29,34,36,40,41,42],$Vf=[1,33],$Vg=[1,39],$Vh=[2,32],$Vi=[1,54],$Vj=[1,50],$Vk=[1,46],$Vl=[1,47],$Vm=[1,48],$Vn=[1,49],$Vo=[1,51],$Vp=[1,52],$Vq=[1,53],$Vr=[1,55],$Vs=[1,56],$Vt=[1,58],$Vu=[1,59],$Vv=[1,60],$Vw=[8,28,35],$Vx=[1,79],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[1,84],$VD=[1,85],$VE=[1,86],$VF=[1,87],$VG=[1,88],$VH=[1,89],$VI=[1,90],$VJ=[1,91],$VK=[1,92],$VL=[1,93],$VM=[8,20,31,45,54,55,56,57,58,59,60,61,63,64,65,66,67,68,76],$VN=[8,20,31,45,60,61,76],$VO=[1,136],$VP=[8,20,31,45,54,55,60,61,63,64,65,66,67,68,76],$VQ=[8,20,31,45,54,55,56,57,58,60,61,63,64,65,66,67,68,76],$VR=[8,20,31,45,60,61,63,64,65,66,67,68,76],$VS=[5,17,21,22,24,25,26,27,29,34,36,37,39,40,41,42],$VT=[34,44,47];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INIT":3,"INSTRUCCIONES":4,"EOF":5,"AMBITO_GLOBAL":6,"INVALID":7,"PTCOMA":8,"IMPRIMIR":9,"DECLARACION_ASIGNACION":10,"DECLARACION":11,"ASIGNACION":12,"SENTENCIA_IF":13,"CICLO_WHILE":14,"INS_BREAK":15,"SENTENCIA_SWITCH":16,"RPRINT":17,"PARABRE":18,"EXPRESION":19,"PARCIERRA":20,"RPRINTLN":21,"RINT":22,"LISTA_IDENTIFICADORES":23,"RDOUBLE":24,"RCHAR":25,"RSTRING":26,"RBOOLEAN":27,"IGUAL":28,"IDENTIFICADOR":29,"CORABRE":30,"CORCIERRA":31,"ENCAPSULAMIENTO":32,"LLAVEA":33,"LLAVEC":34,"COMA":35,"RIF":36,"RELSE":37,"LISTA_ELIF":38,"RELIF":39,"RWHILE":40,"RBREAK":41,"RSWITCH":42,"LISTA_CASES":43,"RDEFAULT":44,"DOSPUNTOS":45,"AMBITO_LOCAL":46,"RCASE":47,"ENTERO":48,"CADENA":49,"CARACTER":50,"DECIMAL":51,"RTRUE":52,"RFALSE":53,"MAS":54,"MENOS":55,"MULTIPLICACION":56,"DIVISION":57,"MODULO":58,"POTENCIA":59,"OR":60,"AND":61,"NOT":62,"IGUALIGUAL":63,"DIFERENTE":64,"MENOR":65,"MAYOR":66,"MENOROIGUAL":67,"MAYOROIGUAL":68,"INCREMENTO":69,"DECREMENTO":70,"LLAMADA":71,"OPERADOR_TERNARIO":72,"CASTEOS":73,"ACCESO_VECTORES":74,"FUNCIONES_NATIVAS":75,"INTERROGACION":76,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"INVALID",8:"PTCOMA",17:"RPRINT",18:"PARABRE",20:"PARCIERRA",21:"RPRINTLN",22:"RINT",24:"RDOUBLE",25:"RCHAR",26:"RSTRING",27:"RBOOLEAN",28:"IGUAL",29:"IDENTIFICADOR",30:"CORABRE",31:"CORCIERRA",33:"LLAVEA",34:"LLAVEC",35:"COMA",36:"RIF",37:"RELSE",39:"RELIF",40:"RWHILE",41:"RBREAK",42:"RSWITCH",44:"RDEFAULT",45:"DOSPUNTOS",46:"AMBITO_LOCAL",47:"RCASE",48:"ENTERO",49:"CADENA",50:"CARACTER",51:"DECIMAL",52:"RTRUE",53:"RFALSE",54:"MAS",55:"MENOS",56:"MULTIPLICACION",57:"DIVISION",58:"MODULO",59:"POTENCIA",60:"OR",61:"AND",62:"NOT",63:"IGUALIGUAL",64:"DIFERENTE",65:"MENOR",66:"MAYOR",67:"MENOROIGUAL",68:"MAYOROIGUAL",69:"INCREMENTO",70:"DECREMENTO",71:"LLAMADA",73:"CASTEOS",74:"ACCESO_VECTORES",75:"FUNCIONES_NATIVAS",76:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[9,5],[9,5],[11,3],[11,3],[11,3],[11,3],[11,3],[12,4],[12,7],[12,10],[10,5],[10,5],[10,5],[10,5],[10,5],[32,3],[32,2],[23,3],[23,1],[13,5],[13,7],[13,6],[13,8],[38,6],[38,5],[14,5],[15,2],[16,7],[16,10],[16,9],[43,5],[43,4],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,1],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,3],[19,3],[19,3],[19,2],[19,3],[19,3],[19,3],[19,3],[19,3],[19,3],[19,2],[19,2],[19,1],[19,1],[19,1],[19,1],[19,1],[72,5]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
$$[$0-1].push($$[$0]); this.$=$$[$0-1];
break;
case 3: case 32:
this.$=[$$[$0]];
break;
case 4:
controller.listaErrores.push(new errores.default('ERROR LEXICO', "No se esperaba el caracter " + $$[$0], _$[$0].first_line, _$[$0].first_column));
break;
case 5:
controller.listaErrores.push(new errores.default('ERROR SINTACTICO', "Se esperaba token", _$[$0-1].first_line, _$[$0-1].first_column));
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 13: case 73:
this.$=$$[$0];
break;
case 14:
this.$=new impresion.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 15:
this.$=new impresionconsalto.default($$[$0-2],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 16:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.ENTERO, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 17:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.DECIMAL, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 18:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.CADENA, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 19:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.CARACTER, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 20:
this.$= new Declaracion.default($$[$0-1],Tipo.DataType.BOOLEANO, _$[$0-2].first_line,_$[$0-2].first_column);
break;
case 21:
this.$= new Asignacion.default($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].first_column);
break;
case 22: case 23: case 70: case 71: case 72: case 74: case 75: case 76:
;
break;
case 24:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.ENTERO, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 25:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.DECIMAL, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 26:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.CADENA, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 27:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.CARACTER, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 28:
this.$=new DeclaracionAsignacion.default($$[$0-3],Tipo.DataType.BOOLEANO, $$[$0-1], _$[$0-4].first_line, _$[$0-4].first_column);
break;
case 29:
this.$=$$[$0-1];
break;
case 30:
this.$=[];
break;
case 31:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];console.log(this.$)
break;
case 33:
this.$=new insif.default($$[$0-2],$$[$0],null,null,_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 34:
this.$=new insif.default($$[$0-4],$$[$0-2],null,$$[$0],_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 35:
this.$=new insif.default($$[$0-3],$$[$0-1],$$[$0],null,_$[$0-5].first_line,_$[$0-5].first_column);
break;
case 36:
this.$=new insif.default($$[$0-5],$$[$0-3],$$[$0-2],$$[$0],_$[$0-7].first_line,_$[$0-7].first_column);
break;
case 37:
$$[$0-5].push(new elif.default($$[$0-2],$$[$0],_$[$0-5].first_line,_$[$0-5].first_column)); this.$=$$[$0-5]
break;
case 38:
this.$=[new elif.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column)];
break;
case 39:
this.$ = new inswhile.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
case 40:
this.$=new insbreak.default(_$[$0-1].first_line,_$[$0-1].first_column);
break;
case 41:
this.$=new inswitch.default($$[$0-4],$$[$0-1],null,_$[$0-6].first_line,_$[$0-6].first_column);
break;
case 42:
this.$= new inswitch.default($$[$0-7],$$[$0-4],$$[$0-1],_$[$0-9].first_line,_$[$0-9].first_column);
break;
case 43:
this.$= new inswitch.default($$[$0-6],null,$$[$0-1],_$[$0-8].first_line,_$[$0-8].first_column);
break;
case 44:
$$[$0-4].push(new Caso.default($$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column));
break;
case 45:
this.$=[new Caso.default($$[$0-1],$$[$01],_$[$0-3].first_line,_$[$0-3].first_column)];
break;
case 46:
this.$ = new nativo.default(Tipo.DataType.ENTERO,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 47:
this.$ = new nativo.default(Tipo.DataType.CADENA,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 48:
this.$ = new nativo.default(Tipo.DataType.CARACTER,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 49:
this.$ = new nativo.default(Tipo.DataType.DECIMAL,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 50:
this.$ = new identificador.default($$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 51: case 52:
this.$ = new nativo.default(Tipo.DataType.BOOLEANO,$$[$0], _$[$0].first_line, _$[$0].first_column);
break;
case 53:
this.$ = new Aritmetica.default(Tipo.tipoOp.SUMA,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 54:
this.$ = new Aritmetica.default(Tipo.tipoOp.RESTA,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 55:
this.$ = new Aritmetica.default(Tipo.tipoOp.MULTIPLICACION,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 56:
this.$ = new Aritmetica.default(Tipo.tipoOp.DIVISION,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 57:
this.$ = new Aritmetica.default(Tipo.tipoOp.MODULO,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 58:
this.$ = new Aritmetica.default(Tipo.tipoOp.POTENCIA,$$[$0-2],$$[$0],_$[$0-2].first_line, _$[$0-2].first_column);
break;
case 59:
this.$ = new Unario.default($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 60:
this.$ = $$[$0-1];
break;
case 61:
this.$ = new Logico.default(Tipo.tipoLog.OR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 62:
this.$ = new Logico.default(Tipo.tipoLog.AND, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 63:
this.$ = new Not.default($$[$0],_$[$0-1].first_line, _$[$0-1].first_column);
break;
case 64:
this.$ = new Relacional.default(Tipo.tipoRel.IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 65:
this.$ = new Relacional.default(Tipo.tipoRel.DIFERENTE, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 66:
this.$ = new Relacional.default(Tipo.tipoRel.MENOR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 67:
this.$ = new Relacional.default(Tipo.tipoRel.MAYOR, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 68:
this.$ = new Relacional.default(Tipo.tipoRel.MENOR_IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 69:
this.$ = new Relacional.default(Tipo.tipoRel.MAYOR_IGUAL, $$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 77:
this.$ = new opternario.default($$[$0-4],$$[$0-2],$$[$0],_$[$0-4].first_line,_$[$0-4].first_column);
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V2,21:$V3,22:$V4,23:21,24:$V5,25:$V6,26:$V7,27:$V8,29:$V9,36:$Va,40:$Vb,41:$Vc,42:$Vd},{1:[3]},{5:[1,27],6:28,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V2,21:$V3,22:$V4,23:21,24:$V5,25:$V6,26:$V7,27:$V8,29:$V9,36:$Va,40:$Vb,41:$Vc,42:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),{8:[1,29]},o($Ve,[2,6]),o($Ve,[2,7]),o($Ve,[2,8]),o($Ve,[2,9]),o($Ve,[2,10]),o($Ve,[2,11]),o($Ve,[2,12]),o($Ve,[2,13]),{18:[1,30]},{18:[1,31]},{23:32,29:$Vf},{23:34,29:$Vf},{23:35,29:$Vf},{23:36,29:$Vf},{23:37,29:$Vf},{28:[1,38],35:$Vg},o([28,35],$Vh,{30:[1,40]}),{18:[1,41]},{18:[1,42]},{8:[1,43]},{18:[1,44]},{1:[2,1]},o($Ve,[2,2]),o($Ve,[2,5]),{18:$Vi,19:45,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:61,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{8:[1,63],28:[1,62],35:$Vg},o($Vw,$Vh),{8:[1,65],28:[1,64],35:$Vg},{8:[1,67],28:[1,66],35:$Vg},{8:[1,69],28:[1,68],35:$Vg},{8:[1,71],28:[1,70],35:$Vg},{18:$Vi,19:72,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{29:[1,73]},{18:$Vi,19:74,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:75,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:76,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},o($Ve,[2,40]),{18:$Vi,19:77,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{20:[1,78],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},o($VM,[2,46]),o($VM,[2,47]),o($VM,[2,48]),o($VM,[2,49]),o($VM,[2,50],{69:[1,94],70:[1,95]}),o($VM,[2,51]),o($VM,[2,52]),{18:$Vi,19:96,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:97,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:98,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},o($VM,[2,72]),o($VM,[2,73]),o($VM,[2,74]),o($VM,[2,75]),o($VM,[2,76]),{20:[1,99],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{18:$Vi,19:100,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},o($Ve,[2,16]),{18:$Vi,19:101,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},o($Ve,[2,17]),{18:$Vi,19:102,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},o($Ve,[2,19]),{18:$Vi,19:103,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},o($Ve,[2,18]),{18:$Vi,19:104,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},o($Ve,[2,20]),{8:[1,105],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},o($Vw,[2,31]),{31:[1,106],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{20:[1,107],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{20:[1,108],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{20:[1,109],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{8:[1,110]},{18:$Vi,19:111,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:112,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:113,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:114,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:115,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:116,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:117,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:118,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:119,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:120,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:121,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:122,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:123,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:124,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:125,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},o($VM,[2,70]),o($VM,[2,71]),o($VM,[2,59]),{20:[1,126],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},o($VN,[2,63],{54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK}),{8:[1,127]},{8:[1,128],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{8:[1,129],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{8:[1,130],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{8:[1,131],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{8:[1,132],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},o($Ve,[2,21]),{28:[1,133],30:[1,134]},{32:135,33:$VO},{32:137,33:$VO},{33:[1,138]},o($Ve,[2,14]),o($VP,[2,53],{56:$Vz,57:$VA,58:$VB,59:$VC}),o($VP,[2,54],{56:$Vz,57:$VA,58:$VB,59:$VC}),o($VQ,[2,55],{59:$VC}),o($VQ,[2,56],{59:$VC}),o($VQ,[2,57],{59:$VC}),o($VM,[2,58]),o([8,20,31,45,60,76],[2,61],{54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK}),o($VN,[2,62],{54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK}),o($VR,[2,64],{54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC}),o($VR,[2,65],{54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC}),o($VR,[2,66],{54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC}),o($VR,[2,67],{54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC}),o($VR,[2,68],{54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC}),o($VR,[2,69],{54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC}),{45:[1,139],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},o($VM,[2,60]),o($Ve,[2,15]),o($Ve,[2,24]),o($Ve,[2,25]),o($Ve,[2,26]),o($Ve,[2,27]),o($Ve,[2,28]),{18:$Vi,19:140,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{18:$Vi,19:141,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},o($Ve,[2,33],{38:143,37:[1,142],39:[1,144]}),{2:$V0,4:145,6:3,7:$V1,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V2,21:$V3,22:$V4,23:21,24:$V5,25:$V6,26:$V7,27:$V8,29:$V9,34:[1,146],36:$Va,40:$Vb,41:$Vc,42:$Vd},o($Ve,[2,39]),{43:147,44:[1,148],47:[1,149]},{18:$Vi,19:150,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{8:[1,151],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{31:[1,152],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{32:153,33:$VO},o($Ve,[2,35],{37:[1,154],39:[1,155]}),{18:[1,156]},{6:28,9:6,10:7,11:8,12:9,13:10,14:11,15:12,16:13,17:$V2,21:$V3,22:$V4,23:21,24:$V5,25:$V6,26:$V7,27:$V8,29:$V9,34:[1,157],36:$Va,40:$Vb,41:$Vc,42:$Vd},o($VS,[2,30]),{34:[1,158],44:[1,159],47:[1,160]},{45:[1,161]},{18:$Vi,19:162,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},o([8,20,31,45,76],[2,77],{54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK}),o($Ve,[2,22]),{28:[1,163]},o($Ve,[2,34]),{32:164,33:$VO},{18:[1,165]},{18:$Vi,19:166,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},o($VS,[2,29]),o($Ve,[2,41]),{45:[1,167]},{18:$Vi,19:168,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{46:[1,169]},{45:[1,170],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{18:$Vi,19:171,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},o($Ve,[2,36]),{18:$Vi,19:172,29:$Vj,48:$Vk,49:$Vl,50:$Vm,51:$Vn,52:$Vo,53:$Vp,55:$Vq,62:$Vr,71:$Vs,72:57,73:$Vt,74:$Vu,75:$Vv},{20:[1,173],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{46:[1,174]},{45:[1,175],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{34:[1,176]},{46:[1,177]},{8:[1,178],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{20:[1,179],54:$Vx,55:$Vy,56:$Vz,57:$VA,58:$VB,59:$VC,60:$VD,61:$VE,63:$VF,64:$VG,65:$VH,66:$VI,67:$VJ,68:$VK,76:$VL},{32:180,33:$VO},{34:[1,181]},{46:[1,182]},o($Ve,[2,43]),o($VT,[2,45]),o($Ve,[2,23]),{32:183,33:$VO},o($VS,[2,38]),o($Ve,[2,42]),o($VT,[2,44]),o($VS,[2,37])],
defaultActions: {27:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    //codigo js
    const controller = require('../../../controller/parser/parser')
    const errores = require('./Exceptions/Error')
    const nativo = require('./Expresions/Native');
    const Tipo = require('./Data/Data');
    const impresion = require('./Instructions/imprimir');
    const impresionconsalto = require('./Instructions/ImprimirConSalto');
    const DeclaracionAsignacion = require('./Instructions/DeclaracionAsignacion');
    const Declaracion = require('./Instructions/Declaracion');
    const Asignacion = require('./Instructions/Asignacion');
    const Aritmetica = require('./Expresions/Aritmetica');
    const Unario = require('./Expresions/Unario');
    const Not = require('./Expresions/Not');
    const Relacional = require('./Expresions/Relacional');
    const Logico = require('./Expresions/Logico');
    const insif = require('./Instructions/Sentencia_If');
    const simbolo = require('./Symbol/Symbol');
    const elif = require('./Instructions/Elif');
    const inswhile = require('./Instructions/Ciclo_While');
    const insbreak = require('./Instructions/Break');
    const inswitch = require('./Instructions/Sentencia_Switch');
    const inscase = require('./Instructions/Caso');
    const opternario = require('./Expresions/Operador_Ternario');
    const identificador = require('./Expresions/Identificador');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0://comentario unilinea
break;
case 1://comentario multilinea
break;
case 2://EXPACIOS EN BLANCO
break;
case 3:console.log(yy_.yytext);return 22
break;
case 4:return 24;
break;
case 5:return 27;
break;
case 6:return 25;
break;
case 7:return 26;
break;
case 8:return 52;
break;
case 9:return 53;
break;
case 10:return 36;
break;
case 11:return 37;
break;
case 12:return 39;
break;
case 13:return 42;
break;
case 14:return 47;
break;
case 15:return 44;
break;
case 16:return 41;
break;
case 17:return 40;
break;
case 18:return 'RFOR';
break;
case 19:return 'RDO';
break;
case 20:return 'RUNTIL';
break;
case 21:return 'RCONTINUE';
break;
case 22:return 'RRETURN';
break;
case 23:return 'RVOID';
break;
case 24:return 17;
break;
case 25:return 21;
break;
case 26:return 'RTOLOWER';
break;
case 27:return 'RTOUPPER';
break;
case 28:return 'RROUND';
break;
case 29:return 'RLENGTH';
break;
case 30:return 'RTYPEOF';
break;
case 31:return 'RTOSTRING';
break;
case 32:return 'RTOCHARARRAY';
break;
case 33:return 'RPUSH';
break;
case 34:return 'RPOP';
break;
case 35:return 'RRUN';
break;
case 36:return 'RNEW';
break;
case 37:return 69;
break;
case 38:return 70;
break;
case 39:return 58;
break;
case 40:return 68;
break;
case 41:return 67;
break;
case 42:return 63;
break;
case 43:return 64;
break;
case 44:return 66;
break;
case 45:return 65;
break;
case 46:return 54;
break;
case 47:return 55;
break;
case 48:return 56;
break;
case 49:return 57;
break;
case 50:return 59;
break;
case 51:console.log(yy_.yytext);return 28;
break;
case 52:return 60;
break;
case 53:return 61;
break;
case 54:return 62;
break;
case 55:return 76;
break;
case 56:return 45;
break;
case 57:return 18;
break;
case 58:return 20;
break;
case 59:console.log(yy_.yytext);return 8;
break;
case 60:return 33;
break;
case 61:return 34;
break;
case 62:return 35;
break;
case 63:return 'PUNTO';
break;
case 64:return 30;
break;
case 65:return 31;
break;
case 66: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 49; 
break;
case 67:console.log(yy_.yytext);return 51;
break;
case 68:console.log(yy_.yytext);return 48;
break;
case 69: yy_.yytext=yy_.yytext.substr(1,yy_.yyleng-2); return 50; 
break;
case 70:console.log(yy_.yytext);return 29;
break;
case 71:return 5;
break;
case 72:return 7;
break;
}
},
rules: [/^(?:[/][/].*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:\s+)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:char\b)/i,/^(?:string\b)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:elif\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:break\b)/i,/^(?:while\b)/i,/^(?:for\b)/i,/^(?:do\b)/i,/^(?:until\b)/i,/^(?:continue\b)/i,/^(?:return\b)/i,/^(?:void\b)/i,/^(?:Print\b)/i,/^(?:Println\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:round\b)/i,/^(?:length\b)/i,/^(?:typeof\b)/i,/^(?:toString\b)/i,/^(?:toCharArray\b)/i,/^(?:push\b)/i,/^(?:pop\b)/i,/^(?:run\b)/i,/^(?:new\b)/i,/^(?:\+\+)/i,/^(?:--)/i,/^(?:%)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:=)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:!)/i,/^(?:\?)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:;)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:,)/i,/^(?:\.)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:[\"](((\\')|(\\")|(\\n)|(\\t)|(\\))|[^\\\"\n])*[\"])/i,/^(?:[0-9]+\.[0-9]+\b)/i,/^(?:[0-9]+\b)/i,/^(?:'(([^\"\'\\\\]{0,1}|\\'|\\"|\\n|\\r|\\t|\\\\))')/i,/^(?:([a-zA-Z_$])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = analizador;
exports.Parser = analizador.Parser;
exports.parse = function () { return analizador.parse.apply(analizador, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}